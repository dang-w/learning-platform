{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-17T18:24:18.346Z",
    "end": "2025-03-17T18:24:19.216Z",
    "duration": 870,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "688e5eed-07f1-4c64-94e1-b4033fba4145",
      "title": "",
      "fullFile": "cypress/e2e/url-metadata.cy.ts",
      "file": "cypress/e2e/url-metadata.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9d98a457-79f3-47e1-aed4-918c83720aa9",
          "title": "URL Metadata Extraction",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should extract metadata from a valid URL",
              "fullTitle": "URL Metadata Extraction should extract metadata from a valid URL",
              "timedOut": null,
              "duration": 788,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/url-metadata.cy.ts\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/url-metadata.cy.ts/URL Metadata Extraction -- should extract metadata from a valid URL -- before each hook (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "// Enter a valid URL in the URL input field\ncy.get('[data-testid=\"resource-url-input\"]').type('https://example.com');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Check that the loading indicator is displayed\ncy.get('[data-testid=\"metadata-loading\"]').should('be.visible');\n// Wait for the metadata to be extracted\ncy.get('[data-testid=\"metadata-loading\"]', { timeout: 10000 }).should('not.exist');\n// Check that the title field is populated\ncy.get('[data-testid=\"resource-title-input\"]').should('not.have.value', '');\n// Check that the description field is populated\ncy.get('[data-testid=\"resource-description-input\"]').should('not.have.value', '');",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://localhost:3000/resources/new\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `URL Metadata Extraction`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://localhost:3000/resources/new\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `URL Metadata Extraction`\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:132351:76)\n    at visitFailedByErr (http://localhost:3000/__cypress/runner/cypress_runner.js:131757:12)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:132334:13)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1667:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2256:14)",
                "diff": null
              },
              "uuid": "e99c3851-520c-4113-8138-79377cf2c3bc",
              "parentUUID": "9d98a457-79f3-47e1-aed4-918c83720aa9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show an error message for invalid URLs",
              "fullTitle": "URL Metadata Extraction should show an error message for invalid URLs",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Enter an invalid URL in the URL input field\ncy.get('[data-testid=\"resource-url-input\"]').type('invalid-url');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Check that the error message is displayed\ncy.get('[data-testid=\"metadata-error\"]').should('be.visible');\n// Check that the error message contains the expected text\ncy.get('[data-testid=\"metadata-error\"]').should('contain', 'Invalid URL');",
              "err": {},
              "uuid": "9b139e0b-db26-49c8-83c6-d156c2e267d2",
              "parentUUID": "9d98a457-79f3-47e1-aed4-918c83720aa9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show an error message when metadata extraction fails",
              "fullTitle": "URL Metadata Extraction should show an error message when metadata extraction fails",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Enter a URL that will fail metadata extraction\ncy.get('[data-testid=\"resource-url-input\"]').type('https://nonexistent-site-for-testing.com');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Check that the loading indicator is displayed\ncy.get('[data-testid=\"metadata-loading\"]').should('be.visible');\n// Wait for the error message to be displayed\ncy.get('[data-testid=\"metadata-error\"]', { timeout: 10000 }).should('be.visible');\n// Check that the error message contains the expected text\ncy.get('[data-testid=\"metadata-error\"]').should('contain', 'Failed to extract metadata');",
              "err": {},
              "uuid": "6459d8c2-0f09-4489-b1c6-d5088c5d126d",
              "parentUUID": "9d98a457-79f3-47e1-aed4-918c83720aa9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow manual entry after failed metadata extraction",
              "fullTitle": "URL Metadata Extraction should allow manual entry after failed metadata extraction",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Enter a URL that will fail metadata extraction\ncy.get('[data-testid=\"resource-url-input\"]').type('https://nonexistent-site-for-testing.com');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Wait for the error message to be displayed\ncy.get('[data-testid=\"metadata-error\"]', { timeout: 10000 }).should('be.visible');\n// Enter title manually\ncy.get('[data-testid=\"resource-title-input\"]').type('Manual Title');\n// Enter description manually\ncy.get('[data-testid=\"resource-description-input\"]').type('Manual description for testing');\n// Select resource type\ncy.get('[data-testid=\"resource-type-select\"]').click();\ncy.get('[data-testid=\"resource-type-article\"]').click();\n// Add tags\ncy.get('[data-testid=\"resource-tags-input\"]').type('test{enter}manual{enter}');\n// Submit the form\ncy.get('[data-testid=\"save-resource-button\"]').click();\n// Check that we're redirected to the resources page\ncy.url().should('include', '/resources');\n// Check that the new resource is displayed in the list\ncy.get('[data-testid=\"resources-list\"]').should('contain', 'Manual Title');",
              "err": {},
              "uuid": "bd0ee37c-561c-49b5-b536-40c8c4fdd506",
              "parentUUID": "9d98a457-79f3-47e1-aed4-918c83720aa9",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e99c3851-520c-4113-8138-79377cf2c3bc"
          ],
          "pending": [],
          "skipped": [
            "9b139e0b-db26-49c8-83c6-d156c2e267d2",
            "6459d8c2-0f09-4489-b1c6-d5088c5d126d",
            "bd0ee37c-561c-49b5-b536-40c8c4fdd506"
          ],
          "duration": 788,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}