{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-16T19:23:05.110Z",
    "end": "2025-03-16T19:23:16.514Z",
    "duration": 11404,
    "testsRegistered": 9,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 8,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "db258366-d745-4610-b9a8-8223170ca6e0",
      "title": "",
      "fullFile": "cypress/e2e/profile.cy.ts",
      "file": "cypress/e2e/profile.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
          "title": "Profile Management",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display user profile information",
              "fullTitle": "Profile Management should display user profile information",
              "timedOut": null,
              "duration": 11278,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/profile.cy.ts\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/profile.cy.ts/Profile Management -- should display user profile information -- before each hook (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "cy.contains('h1', 'Profile').should('be.visible');\ncy.contains('Test User').should('be.visible');\ncy.contains('testuser').should('be.visible');\ncy.contains('test@example.com').should('be.visible');\ncy.contains('Software developer interested in web technologies').should('be.visible');\ncy.get('img[alt=\"User avatar\"]').should('have.attr', 'src', 'https://example.com/avatar.jpg');",
              "err": {
                "message": "CypressError: Timed out retrying after 10000ms: `cy.wait()` timed out waiting `10000ms` for the 1st request to the route: `getUserProfile`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Profile Management`",
                "estack": "CypressError: Timed out retrying after 10000ms: `cy.wait()` timed out waiting `10000ms` for the 1st request to the route: `getUserProfile`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Profile Management`\n    at cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:75176:18)\n    at Object.errByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:75230:10)\n    at checkForXhr (http://localhost:3000/__cypress/runner/cypress_runner.js:136105:84)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:136131:28)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:3000/__cypress/runner/cypress_runner.js:4285:29)\n    at whenStable (http://localhost:3000/__cypress/runner/cypress_runner.js:144517:68)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:144458:14)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1671:18)\n    at Promise._fulfill (http://localhost:3000/__cypress/runner/cypress_runner.js:1615:18)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:5420:46)\nFrom Your Spec Code:\n    at Context.eval (webpack://frontend/./cypress/e2e/profile.cy.ts:30:0)",
                "diff": null
              },
              "uuid": "13b6a05b-cdd0-4970-a4fc-3ef10c279971",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display user statistics",
              "fullTitle": "Profile Management should display user statistics",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains('Statistics').should('be.visible');\ncy.contains('45 days active').should('be.visible');\ncy.contains('12 resources completed').should('be.visible');\ncy.contains('87 knowledge items learned').should('be.visible');\ncy.contains('45 minutes average study time').should('be.visible');",
              "err": {},
              "uuid": "ca03f30d-58eb-475d-bc9b-c4f9a246ef01",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should update profile information",
              "fullTitle": "Profile Management should update profile information",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock the API call to update profile\ncy.intercept('PUT', '/api/user/profile', {\n    statusCode: 200,\n    body: {\n        id: 1,\n        username: 'testuser',\n        email: 'test@example.com',\n        name: 'Updated Name',\n        bio: 'Updated bio with more details about my interests',\n        avatar: 'https://example.com/avatar.jpg'\n    }\n}).as('updateProfile');\ncy.contains('Edit Profile').click();\ncy.get('input[name=\"name\"]').clear().type('Updated Name');\ncy.get('textarea[name=\"bio\"]').clear().type('Updated bio with more details about my interests');\ncy.get('button[type=\"submit\"]').click();\ncy.wait('@updateProfile');\n// Verify the updated information is displayed\ncy.contains('Updated Name').should('be.visible');\ncy.contains('Updated bio with more details about my interests').should('be.visible');\ncy.contains('Profile updated successfully').should('be.visible');",
              "err": {},
              "uuid": "66a888b2-f6d1-463d-9c16-103e78356f9d",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should update user preferences",
              "fullTitle": "Profile Management should update user preferences",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock the API call to update preferences\ncy.intercept('PUT', '/api/user/preferences', {\n    statusCode: 200,\n    body: {\n        emailNotifications: false,\n        darkMode: true,\n        studyReminders: false\n    }\n}).as('updatePreferences');\ncy.contains('Preferences').click();\ncy.get('input[name=\"emailNotifications\"]').uncheck();\ncy.get('input[name=\"darkMode\"]').check();\ncy.get('input[name=\"studyReminders\"]').uncheck();\ncy.get('button').contains('Save Preferences').click();\ncy.wait('@updatePreferences');\n// Verify the preferences were updated\ncy.get('input[name=\"emailNotifications\"]').should('not.be.checked');\ncy.get('input[name=\"darkMode\"]').should('be.checked');\ncy.get('input[name=\"studyReminders\"]').should('not.be.checked');\ncy.contains('Preferences updated successfully').should('be.visible');",
              "err": {},
              "uuid": "17c48da8-cde4-4ef9-968b-8d30866f4553",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should change user password",
              "fullTitle": "Profile Management should change user password",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock the API call to change password\ncy.intercept('POST', '/api/user/change-password', {\n    statusCode: 200,\n    body: {\n        success: true,\n        message: 'Password changed successfully'\n    }\n}).as('changePassword');\ncy.contains('Security').click();\ncy.get('input[name=\"currentPassword\"]').type('oldpassword');\ncy.get('input[name=\"newPassword\"]').type('newpassword123');\ncy.get('input[name=\"confirmPassword\"]').type('newpassword123');\ncy.get('button').contains('Change Password').click();\ncy.wait('@changePassword');\n// Verify the password was changed\ncy.contains('Password changed successfully').should('be.visible');",
              "err": {},
              "uuid": "917be536-95b2-48ec-9a81-689b72236c99",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show validation errors for password mismatch",
              "fullTitle": "Profile Management should show validation errors for password mismatch",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains('Security').click();\ncy.get('input[name=\"currentPassword\"]').type('oldpassword');\ncy.get('input[name=\"newPassword\"]').type('newpassword123');\ncy.get('input[name=\"confirmPassword\"]').type('differentpassword');\ncy.get('button').contains('Change Password').click();\n// Verify validation error is shown\ncy.contains('Passwords do not match').should('be.visible');",
              "err": {},
              "uuid": "ad451256-7fa0-4fe4-abc3-3f77c255335a",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should upload a new avatar",
              "fullTitle": "Profile Management should upload a new avatar",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock the API call to upload avatar\ncy.intercept('POST', '/api/user/avatar', {\n    statusCode: 200,\n    body: {\n        success: true,\n        avatar: 'https://example.com/new-avatar.jpg'\n    }\n}).as('uploadAvatar');\ncy.contains('Edit Profile').click();\n// Simulate file upload\ncy.get('input[type=\"file\"]').selectFile('cypress/fixtures/avatar.jpg', { force: true });\ncy.get('button').contains('Upload Avatar').click();\ncy.wait('@uploadAvatar');\n// Mock the updated user profile with new avatar\ncy.intercept('GET', '/api/auth/session', {\n    statusCode: 200,\n    body: {\n        user: {\n            id: 1,\n            username: 'testuser',\n            email: 'test@example.com',\n            name: 'Test User',\n            bio: 'Software developer interested in web technologies',\n            avatar: 'https://example.com/new-avatar.jpg',\n            preferences: {\n                emailNotifications: true,\n                darkMode: false,\n                studyReminders: true\n            },\n            stats: {\n                daysActive: 45,\n                resourcesCompleted: 12,\n                knowledgeItemsLearned: 87,\n                averageStudyTime: 45\n            }\n        },\n        expires: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n    }\n}).as('getSessionUpdated');\n// Reload the page to see the updated avatar\ncy.reload();\ncy.wait('@getSessionUpdated');\n// Verify the new avatar is displayed\ncy.get('img[alt=\"User avatar\"]').should('have.attr', 'src', 'https://example.com/new-avatar.jpg');",
              "err": {},
              "uuid": "a4317f9b-134e-41d2-9a98-2be5242ea52a",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should display learning activity history",
              "fullTitle": "Profile Management should display learning activity history",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock learning activity history\ncy.intercept('GET', '/api/user/activity', {\n    statusCode: 200,\n    body: [\n        {\n            id: 1,\n            type: 'resource_completed',\n            title: 'Completed \"JavaScript: The Good Parts\"',\n            timestamp: '2023-03-15T14:30:00Z'\n        },\n        {\n            id: 2,\n            type: 'knowledge_item_learned',\n            title: 'Learned \"Variables and Data Types\"',\n            timestamp: '2023-03-14T10:15:00Z'\n        },\n        {\n            id: 3,\n            type: 'learning_path_progress',\n            title: 'Completed 50% of \"Frontend Development\" path',\n            timestamp: '2023-03-12T16:45:00Z'\n        }\n    ]\n}).as('getActivity');\ncy.contains('Activity').click();\ncy.wait('@getActivity');\ncy.contains('Learning Activity').should('be.visible');\ncy.contains('Completed \"JavaScript: The Good Parts\"').should('be.visible');\ncy.contains('Learned \"Variables and Data Types\"').should('be.visible');\ncy.contains('Completed 50% of \"Frontend Development\" path').should('be.visible');",
              "err": {},
              "uuid": "3b699a5e-63eb-4f42-8104-131d00bed487",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow deleting account",
              "fullTitle": "Profile Management should allow deleting account",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Mock the API call to delete account\ncy.intercept('DELETE', '/api/user', {\n    statusCode: 200,\n    body: {\n        success: true,\n        message: 'Account deleted successfully'\n    }\n}).as('deleteAccount');\ncy.contains('Danger Zone').click();\ncy.contains('Delete Account').click();\n// Confirm deletion in modal\ncy.get('input[name=\"confirmText\"]').type('DELETE');\ncy.get('button').contains('Confirm Deletion').click();\ncy.wait('@deleteAccount');\n// Verify redirection to login page\ncy.url().should('include', '/login');\ncy.contains('Account deleted successfully').should('be.visible');",
              "err": {},
              "uuid": "cbb551b2-d032-4f42-ab57-91561245233a",
              "parentUUID": "ae47e7b9-1653-41a3-b73f-871a213b00a9",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "13b6a05b-cdd0-4970-a4fc-3ef10c279971"
          ],
          "pending": [],
          "skipped": [
            "ca03f30d-58eb-475d-bc9b-c4f9a246ef01",
            "66a888b2-f6d1-463d-9c16-103e78356f9d",
            "17c48da8-cde4-4ef9-968b-8d30866f4553",
            "917be536-95b2-48ec-9a81-689b72236c99",
            "ad451256-7fa0-4fe4-abc3-3f77c255335a",
            "a4317f9b-134e-41d2-9a98-2be5242ea52a",
            "3b699a5e-63eb-4f42-8104-131d00bed487",
            "cbb551b2-d032-4f42-ab57-91561245233a"
          ],
          "duration": 11278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}