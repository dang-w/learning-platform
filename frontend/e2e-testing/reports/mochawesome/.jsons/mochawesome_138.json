{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-25T12:22:19.185Z",
    "end": "2025-03-25T12:23:22.912Z",
    "duration": 63727,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "a8f678fb-61a5-4de1-8f6a-b943338acf87",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/notes.cy.ts",
      "file": "e2e-testing/cypress/e2e/notes.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca3a0892-663c-4fab-9f36-3f586344aa72",
          "title": "Notes Management E2E Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should support complete notes workflow",
              "fullTitle": "Notes Management E2E Tests should support complete notes workflow",
              "timedOut": null,
              "duration": 21132,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/notes.cy.ts/Notes Management E2E Tests -- should support complete notes workflow (failed).png\"\n    ],\n    [\n      \"/notes.cy.ts/Notes Management E2E Tests -- should support complete notes workflow (failed) (attempt 2).png\"\n    ],\n    [\n      \"/notes.cy.ts/Notes Management E2E Tests -- should support complete notes workflow -- before each hook (failed) (attempt 3).png\"\n    ]\n  ]\n}",
              "code": "// Create a new note\nnotesPage.clickAddNote();\nvar noteTitle = \"Test Note \".concat(Date.now());\nnotesPage.fillNoteForm({\n    title: noteTitle,\n    content: 'This is a test note created by Cypress',\n    tags: ['test', 'cypress']\n});\nnotesPage.submitNoteForm();\ncy.wait('@createNote');\nnotesPage.verifySuccessNotification();\nnotesPage.verifyNoteExists(noteTitle);\n// Filter by tag\nnotesPage.filterByTag('test');\nnotesPage.verifyNoteExists(noteTitle);\n// Search for note\nnotesPage.searchNotes(noteTitle);\nnotesPage.verifyNoteExists(noteTitle);\n// Delete note\nnotesPage.deleteNote(noteTitle);\ncy.wait('@deleteNote');\nnotesPage.verifySuccessNotification();\nnotesPage.verifyNoteNotExists(noteTitle);",
              "err": {
                "message": "CypressError: Timed out retrying after 20000ms: `cy.wait()` timed out waiting `20000ms` for the 1st request to the route: `getNotes`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Notes Management E2E Tests`",
                "estack": "CypressError: Timed out retrying after 20000ms: `cy.wait()` timed out waiting `20000ms` for the 1st request to the route: `getNotes`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Notes Management E2E Tests`\n    at cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:75176:18)\n    at Object.errByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:75230:10)\n    at checkForXhr (http://localhost:3000/__cypress/runner/cypress_runner.js:136105:84)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:136131:28)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:3000/__cypress/runner/cypress_runner.js:4285:29)\n    at whenStable (http://localhost:3000/__cypress/runner/cypress_runner.js:144517:68)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:144458:14)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1671:18)\n    at Promise._fulfill (http://localhost:3000/__cypress/runner/cypress_runner.js:1615:18)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:5420:46)",
                "diff": null
              },
              "uuid": "0d45a2fd-3bdc-45d3-8543-5b5dcd28b9ce",
              "parentUUID": "ca3a0892-663c-4fab-9f36-3f586344aa72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle error states gracefully",
              "fullTitle": "Notes Management E2E Tests should handle error states gracefully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test empty form submission\nnotesPage.clickAddNote();\nnotesPage.submitNoteForm();\ncy.get('[data-testid=\"form-error\"]').should('be.visible');\n// Test duplicate title error\ncy.intercept('POST', '/api/users/notes', {\n    statusCode: 409,\n    body: { error: 'Note with this title already exists' }\n}).as('createDuplicateNote');\nnotesPage.fillNoteForm({\n    title: 'Duplicate Note',\n    content: 'This should fail'\n});\nnotesPage.submitNoteForm();\ncy.wait('@createDuplicateNote');\nnotesPage.verifyErrorNotification();",
              "err": {},
              "uuid": "5e101c8c-5dec-451c-9a38-ecd308575148",
              "parentUUID": "ca3a0892-663c-4fab-9f36-3f586344aa72",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should support note organization",
              "fullTitle": "Notes Management E2E Tests should support note organization",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Create multiple notes with different tags\nvar notes = [\n    { title: \"Note A \".concat(Date.now()), content: 'Content A', tags: ['work', 'important'] },\n    { title: \"Note B \".concat(Date.now()), content: 'Content B', tags: ['personal'] },\n    { title: \"Note C \".concat(Date.now()), content: 'Content C', tags: ['work'] }\n];\nnotes.forEach(function (note) {\n    notesPage.clickAddNote();\n    notesPage.fillNoteForm(note);\n    notesPage.submitNoteForm();\n    cy.wait('@createNote');\n    notesPage.verifySuccessNotification();\n});\n// Test tag filtering\nnotesPage.filterByTag('work');\nnotesPage.verifyNoteExists(notes[0].title);\nnotesPage.verifyNoteNotExists(notes[1].title);\nnotesPage.verifyNoteExists(notes[2].title);\n// Test search functionality\nnotesPage.searchNotes('Content B');\nnotesPage.verifyNoteExists(notes[1].title);\nnotesPage.verifyNoteNotExists(notes[0].title);",
              "err": {},
              "uuid": "74f537cb-0796-404e-b7a3-f71f59d0148f",
              "parentUUID": "ca3a0892-663c-4fab-9f36-3f586344aa72",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should handle network errors gracefully",
              "fullTitle": "Notes Management E2E Tests should handle network errors gracefully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test API failure\ncy.intercept('POST', '/api/users/notes', {\n    statusCode: 500,\n    body: { error: 'Internal server error' }\n}).as('createNoteError');\nnotesPage.clickAddNote();\nnotesPage.fillNoteForm({\n    title: 'Network Error Test',\n    content: 'This should fail'\n});\nnotesPage.submitNoteForm();\ncy.wait('@createNoteError');\nnotesPage.verifyErrorNotification();",
              "err": {},
              "uuid": "8bbfb0df-add2-4565-a68b-2ab4c5668c91",
              "parentUUID": "ca3a0892-663c-4fab-9f36-3f586344aa72",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0d45a2fd-3bdc-45d3-8543-5b5dcd28b9ce"
          ],
          "pending": [],
          "skipped": [
            "5e101c8c-5dec-451c-9a38-ecd308575148",
            "74f537cb-0796-404e-b7a3-f71f59d0148f",
            "8bbfb0df-add2-4565-a68b-2ab4c5668c91"
          ],
          "duration": 21132,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "e2e-testing/reports/mochawesome/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}