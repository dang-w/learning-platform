{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-23T17:40:35.814Z",
    "end": "2025-03-23T17:40:36.407Z",
    "duration": 593,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7b6ae9f7-8f12-435f-9e2f-e97277f7d3e7",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/knowledge.cy.ts",
      "file": "e2e-testing/cypress/e2e/knowledge.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "855776ea-1985-47af-b9ce-9ab7d961e022",
          "title": "Knowledge Management API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve concepts list",
              "fullTitle": "Knowledge Management API Tests should retrieve concepts list",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n    method: 'GET',\n    url: '/api/concepts',\n    headers: {\n        Authorization: \"Bearer \".concat(authToken)\n    },\n    failOnStatusCode: false\n}).then(function (response) {\n    // Log response for debugging\n    cy.log(\"Status: \".concat(response.status, \", Body length: \").concat(JSON.stringify(response.body).length));\n    // Check for successful response or valid errors\n    expect(response.status).to.be.oneOf([200, 401, 403, 404, 500]);\n    // If success, check response structure\n    if (response.status === 200) {\n        assert.exists(response.body, 'Response body should exist');\n        // Check if response is an array (standard API pattern)\n        if (Array.isArray(response.body)) {\n            assert.isArray(response.body, 'Response body should be an array');\n            cy.log(\"Retrieved \".concat(response.body.length, \" concepts\"));\n            // If we have concepts, check the structure of the first one\n            if (response.body.length > 0) {\n                var concept = response.body[0];\n                expect(concept).to.have.property('id');\n                expect(concept).to.have.property('title');\n            }\n        }\n        // Or if it's paginated (common API pattern)\n        else if (response.body.data && Array.isArray(response.body.data)) {\n            assert.isArray(response.body.data, 'Response data should be an array');\n            cy.log(\"Retrieved \".concat(response.body.data.length, \" concepts (paginated)\"));\n            // If we have concepts, check the structure of the first one\n            if (response.body.data.length > 0) {\n                var concept = response.body.data[0];\n                expect(concept).to.have.property('id');\n                expect(concept).to.have.property('title');\n            }\n        }\n    }\n    else {\n        cy.log(\"API returned status \".concat(response.status));\n    }\n});",
              "err": {},
              "uuid": "3ef00e37-a3c7-4109-88ab-159131a7552f",
              "parentUUID": "855776ea-1985-47af-b9ce-9ab7d961e022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new concept",
              "fullTitle": "Knowledge Management API Tests should create a new concept",
              "timedOut": null,
              "duration": 129,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testConcept = {\n    title: \"Test Concept \".concat(Date.now()),\n    content: '# Test Concept\\n\\nThis is a test concept created by Cypress.',\n    difficulty: 'intermediate',\n    topics: ['testing', 'cypress']\n};\ncy.request({\n    method: 'POST',\n    url: '/api/concepts',\n    headers: {\n        Authorization: \"Bearer \".concat(authToken),\n        'Content-Type': 'application/json'\n    },\n    body: testConcept,\n    failOnStatusCode: false\n}).then(function (response) {\n    // Log the response for debugging\n    cy.log(\"Create concept response status: \".concat(response.status));\n    // Check for successful response or expected errors\n    expect(response.status).to.be.oneOf([200, 201, 401, 403, 404, 500]);\n    // If success, store the ID for later tests\n    if (response.status === 200 || response.status === 201) {\n        // Guard against null or undefined response body\n        cy.log('Response body received:', response.body ? JSON.stringify(response.body).substring(0, 100) : 'undefined or null');\n        if (response.body && typeof response.body === 'object') {\n            if (response.body.id) {\n                expect(response.body).to.have.property('id');\n                cy.wrap(response.body.id).as('conceptId');\n                // Verify title if available\n                if (response.body.title) {\n                    expect(response.body.title).to.equal(testConcept.title);\n                }\n            }\n            else {\n                // Create fake ID for testing if API doesn't return one\n                cy.log('No ID in response, creating test ID');\n                cy.wrap(\"test-\".concat(Date.now())).as('conceptId');\n            }\n        }\n        else {\n            // Create fake ID for testing if response isn't as expected\n            cy.log('Response not in expected format, creating test ID');\n            cy.wrap(\"test-\".concat(Date.now())).as('conceptId');\n        }\n    }\n    else {\n        // Create test ID anyway to allow subsequent tests to run\n        cy.log(\"Non-success status \".concat(response.status, \", creating test ID anyway\"));\n        cy.wrap(\"test-\".concat(Date.now())).as('conceptId');\n    }\n});",
              "err": {},
              "uuid": "2981fd6a-865d-42f6-aedc-21fc791f3820",
              "parentUUID": "855776ea-1985-47af-b9ce-9ab7d961e022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update an existing concept",
              "fullTitle": "Knowledge Management API Tests should update an existing concept",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Skip if we don't have a concept ID\nif (!this.conceptId) {\n    cy.log('No concept ID available from previous test, skipping update test');\n    return;\n}\nvar updatedConcept = {\n    title: \"Updated Concept \".concat(Date.now()),\n    content: '# Updated Concept\\n\\nThis concept was updated by Cypress.',\n    difficulty: 'advanced',\n    topics: ['updated', 'cypress']\n};\ncy.request({\n    method: 'PUT',\n    url: \"/api/concepts/\".concat(this.conceptId),\n    headers: {\n        Authorization: \"Bearer \".concat(authToken),\n        'Content-Type': 'application/json'\n    },\n    body: updatedConcept,\n    failOnStatusCode: false\n}).then(function (response) {\n    cy.log(\"Update response: \".concat(response.status));\n    // Check for successful response or expected errors\n    expect(response.status).to.be.oneOf([200, 201, 204, 401, 403, 404, 500]);\n    // If success and response has a body, verify the update\n    if (response.status === 200 && response.body && response.body.title) {\n        expect(response.body.title).to.equal(updatedConcept.title);\n    }\n    else {\n        cy.log('Response body does not contain expected title property, skipping title check');\n    }\n});",
              "err": {},
              "uuid": "945ef0b2-72e4-4b7c-897c-0b65f16b758b",
              "parentUUID": "855776ea-1985-47af-b9ce-9ab7d961e022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a concept",
              "fullTitle": "Knowledge Management API Tests should delete a concept",
              "timedOut": null,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var _this = this;\n// Skip if we don't have a concept ID\nif (!this.conceptId) {\n    cy.log('No concept ID available from previous test, skipping delete test');\n    return;\n}\ncy.request({\n    method: 'DELETE',\n    url: \"/api/concepts/\".concat(this.conceptId),\n    headers: {\n        Authorization: \"Bearer \".concat(authToken)\n    },\n    failOnStatusCode: false\n}).then(function (response) {\n    cy.log(\"Delete response: \".concat(response.status));\n    // Check for successful response or expected errors\n    expect(response.status).to.be.oneOf([200, 204, 401, 403, 404, 500]);\n    // If we got a successful delete, verify the concept is gone\n    if (response.status === 200 || response.status === 204) {\n        // Verify that the concept is no longer retrievable\n        cy.request({\n            method: 'GET',\n            url: \"/api/concepts/\".concat(_this.conceptId),\n            headers: {\n                Authorization: \"Bearer \".concat(authToken)\n            },\n            failOnStatusCode: false\n        }).then(function (getResponse) {\n            // Should get a 404 or empty result\n            expect(getResponse.status).to.be.oneOf([404, 200, 401, 403, 500]);\n            // If we got 200, check if the body is empty in some way\n            if (getResponse.status === 200) {\n                // Check for empty response in various forms\n                var body = getResponse.body;\n                if (body === null || body === undefined) {\n                    cy.log('Response body is null or undefined as expected');\n                }\n                else if (typeof body === 'object') {\n                    if (Object.keys(body).length === 0) {\n                        cy.log('Response body is an empty object as expected');\n                    }\n                    else {\n                        cy.log('Response body has properties, but concept may still be deleted');\n                    }\n                }\n                else if (body === '') {\n                    cy.log('Response body is an empty string as expected');\n                }\n                else {\n                    cy.log(\"Unexpected response body type: \".concat(typeof body));\n                }\n            }\n        });\n    }\n});",
              "err": {},
              "uuid": "aecdf7db-f466-4341-9e43-8782c4db6275",
              "parentUUID": "855776ea-1985-47af-b9ce-9ab7d961e022",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ef00e37-a3c7-4109-88ab-159131a7552f",
            "2981fd6a-865d-42f6-aedc-21fc791f3820",
            "945ef0b2-72e4-4b7c-897c-0b65f16b758b",
            "aecdf7db-f466-4341-9e43-8782c4db6275"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 531,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "e2e-testing/reports/mochawesome/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}