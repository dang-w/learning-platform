{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-24T13:20:15.078Z",
    "end": "2025-03-24T13:20:38.597Z",
    "duration": 23519,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "71a03ad9-4518-4914-a593-b96257775049",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/resources.cy.ts",
      "file": "e2e-testing/cypress/e2e/resources.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
          "title": "Resources Management E2E Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display resources list and search functionality",
              "fullTitle": "Resources Management E2E Tests should display resources list and search functionality",
              "timedOut": null,
              "duration": 3984,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should display resources list and search functionality-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Take a screenshot of the resources page\n    page_objects_1.resourcesPage.takeScreenshot('resources-list');\n    // Get resource count to verify loading\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        cy.log(\"Found \".concat(count, \" resources\"));\n    });\n    // Check if search functionality is available\n    cy.get('body').then(function ($body) {\n        if ($body.find('[data-testid=\"search-input\"]').length > 0) {\n            page_objects_1.resourcesPage.searchResources('test');\n            page_objects_1.resourcesPage.takeScreenshot('search-results');\n        }\n        else {\n            cy.log('Search functionality not found on the page');\n        }\n    });\n});",
              "err": {},
              "uuid": "0c877f8a-dbaf-4816-9f94-ac1e822be010",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new resource with manual entry",
              "fullTitle": "Resources Management E2E Tests should create a new resource with manual entry",
              "timedOut": null,
              "duration": 3448,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should create a new resource with manual entry-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Check if add resource button is available\n    page_objects_1.resourcesPage.isAddResourceButtonAvailable().then(function (isAvailable) {\n        if (!isAvailable) {\n            cy.log('Add resource button not available, skipping test');\n            return;\n        }\n        // Click add resource button\n        page_objects_1.resourcesPage.clickAddResource();\n        // Create unique title to identify the resource\n        var resourceTitle = \"Test Resource \".concat(Date.now());\n        // Fill the resource form\n        page_objects_1.resourcesPage.fillResourceForm({\n            title: resourceTitle,\n            url: 'https://example.com/test-resource',\n            description: 'This is a test resource created by Cypress',\n            type: 'article'\n        });\n        // Submit the form\n        page_objects_1.resourcesPage.submitResourceForm();\n        // Verify success notification\n        page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n            if (hasSuccess) {\n                cy.log('Resource created successfully');\n            }\n            else {\n                cy.log('No success notification displayed after creating resource');\n            }\n        });\n        // Verify resource exists in the list\n        page_objects_1.resourcesPage.resourceExists(resourceTitle).then(function (exists) {\n            cy.wrap(exists).should('be.true');\n        });\n    });\n});",
              "err": {},
              "uuid": "9fe4a4f7-4a56-4fae-929c-6010f0ae666f",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a resource using URL metadata extraction if available",
              "fullTitle": "Resources Management E2E Tests should create a resource using URL metadata extraction if available",
              "timedOut": null,
              "duration": 3092,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should create a resource using URL metadata extraction if available-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Navigate to the new resource page\n    page_objects_1.resourcesPage.visitNewResource();\n    // Check if URL input is available\n    page_objects_1.resourcesPage.isUrlInputAvailable().then(function (isAvailable) {\n        if (!isAvailable) {\n            cy.log('URL input not available, skipping test');\n            return;\n        }\n        // Check if extract metadata button is available\n        page_objects_1.resourcesPage.isExtractMetadataButtonAvailable().then(function (hasExtractButton) {\n            if (!hasExtractButton) {\n                cy.log('Extract metadata button not available, skipping test');\n                return;\n            }\n            // Enter URL and extract metadata\n            page_objects_1.resourcesPage.enterUrlAndExtractMetadata('https://example.com');\n            // Check if metadata was populated\n            page_objects_1.resourcesPage.isMetadataPopulated().then(function (isPopulated) {\n                if (isPopulated) {\n                    cy.log('Metadata successfully extracted and populated');\n                    // Create unique title to identify the resource\n                    var resourceTitle = \"Metadata Resource \".concat(Date.now());\n                    // Update the title to be unique\n                    page_objects_1.resourcesPage.enterManualDetails(resourceTitle, 'Description from metadata with manual edits');\n                    // Select resource type if not automatically selected\n                    page_objects_1.resourcesPage.selectResourceType('article');\n                    // Submit the form\n                    page_objects_1.resourcesPage.submitResourceForm();\n                    // Verify success notification\n                    page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n                        if (hasSuccess) {\n                            cy.log('Resource with metadata created successfully');\n                        }\n                        else {\n                            cy.log('No success notification displayed after creating resource with metadata');\n                        }\n                    });\n                }\n                else {\n                    cy.log('Metadata extraction may have failed or feature not fully implemented');\n                    cy.log('Falling back to manual entry');\n                    // Create unique title to identify the resource\n                    var resourceTitle = \"Metadata Failed Resource \".concat(Date.now());\n                    // Enter manual details\n                    page_objects_1.resourcesPage.enterManualDetails(resourceTitle, 'Manual entry after metadata extraction failed');\n                    // Select resource type\n                    page_objects_1.resourcesPage.selectResourceType('article');\n                    // Submit the form\n                    page_objects_1.resourcesPage.submitResourceForm();\n                }\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "c4f3fff6-70ee-4586-9155-1ce60d00ae91",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should edit an existing resource",
              "fullTitle": "Resources Management E2E Tests should edit an existing resource",
              "timedOut": null,
              "duration": 3158,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should edit an existing resource-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Get resource count to see if there are any resources to edit\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        if (count === 0) {\n            cy.log('No resources found to edit, creating one first');\n            // Navigate to new resource page\n            page_objects_1.resourcesPage.visitNewResource();\n            // Create a resource to edit\n            var resourceTitle = \"Resource to Edit \".concat(Date.now());\n            page_objects_1.resourcesPage.fillResourceForm({\n                title: resourceTitle,\n                url: 'https://example.com/resource-to-edit',\n                description: 'This resource will be edited',\n                type: 'article'\n            });\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Go back to resources list\n            page_objects_1.resourcesPage.visitResources();\n        }\n        // Get the title of the first resource before editing\n        page_objects_1.resourcesPage.getFirstResourceTitle().then(function (originalTitle) {\n            if (!originalTitle) {\n                cy.log('Failed to get the first resource title, skipping test');\n                return;\n            }\n            // Click edit on the first resource\n            page_objects_1.resourcesPage.clickEditOnFirstResource();\n            // Update the resource title\n            var updatedTitle = \"Updated Resource \".concat(Date.now());\n            page_objects_1.resourcesPage.updateResourceTitle(updatedTitle);\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Verify success notification\n            page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Resource updated successfully');\n                }\n                else {\n                    cy.log('No success notification displayed after updating resource');\n                }\n            });\n            // Verify the updated resource exists in the list\n            page_objects_1.resourcesPage.resourceExists(updatedTitle).then(function (exists) {\n                cy.wrap(exists).should('be.true');\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "d1c58179-529a-4784-9586-9c17773bf052",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should mark a resource as completed",
              "fullTitle": "Resources Management E2E Tests should mark a resource as completed",
              "timedOut": null,
              "duration": 4638,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should mark a resource as completed-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Get resource count to see if there are any resources to mark as completed\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        if (count === 0) {\n            cy.log('No resources found to mark as completed, creating one first');\n            // Navigate to new resource page\n            page_objects_1.resourcesPage.visitNewResource();\n            // Create a resource to mark as completed\n            var resourceTitle = \"Resource to Complete \".concat(Date.now());\n            page_objects_1.resourcesPage.fillResourceForm({\n                title: resourceTitle,\n                url: 'https://example.com/resource-to-complete',\n                description: 'This resource will be marked as completed',\n                type: 'article'\n            });\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Go back to resources list\n            page_objects_1.resourcesPage.visitResources();\n        }\n        // Mark the first resource as completed\n        page_objects_1.resourcesPage.markFirstResourceAsCompleted('Completed as part of Cypress test');\n        // Verify success notification\n        page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n            if (hasSuccess) {\n                cy.log('Resource marked as completed successfully');\n            }\n            else {\n                cy.log('No success notification displayed after marking resource as completed');\n            }\n        });\n        // Verify the resource is marked as completed\n        page_objects_1.resourcesPage.isFirstResourceCompleted().then(function (isCompleted) {\n            cy.wrap(isCompleted).should('be.true');\n        });\n    });\n});",
              "err": {},
              "uuid": "d0c54b5c-3c94-4f3a-a4a3-0b4cdbdb30a1",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a resource",
              "fullTitle": "Resources Management E2E Tests should delete a resource",
              "timedOut": null,
              "duration": 2095,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should delete a resource-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Get resource count to see if there are any resources to delete\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        if (count === 0) {\n            cy.log('No resources found to delete, creating one first');\n            // Navigate to new resource page\n            page_objects_1.resourcesPage.visitNewResource();\n            // Create a resource to delete\n            var resourceTitle = \"Resource to Delete \".concat(Date.now());\n            page_objects_1.resourcesPage.fillResourceForm({\n                title: resourceTitle,\n                url: 'https://example.com/resource-to-delete',\n                description: 'This resource will be deleted',\n                type: 'article'\n            });\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Go back to resources list\n            page_objects_1.resourcesPage.visitResources();\n        }\n        // Get the title of the first resource before deleting\n        page_objects_1.resourcesPage.getFirstResourceTitle().then(function (originalTitle) {\n            if (!originalTitle) {\n                cy.log('Failed to get the first resource title, skipping test');\n                return;\n            }\n            // Delete the first resource\n            page_objects_1.resourcesPage.deleteFirstResource();\n            // Verify success notification\n            page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Resource deleted successfully');\n                }\n                else {\n                    cy.log('No success notification displayed after deleting resource');\n                }\n            });\n            // Verify the resource no longer exists in the list\n            page_objects_1.resourcesPage.resourceExists(originalTitle).then(function (exists) {\n                cy.wrap(exists).should('be.false');\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "e4549b22-2d75-40c8-9772-294c91945c70",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use filtering options if available",
              "fullTitle": "Resources Management E2E Tests should use filtering options if available",
              "timedOut": null,
              "duration": 2334,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests-should use filtering options if available-resources-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Check for type filter\n    page_objects_1.resourcesPage.isTypeFilterAvailable().then(function (hasTypeFilter) {\n        if (hasTypeFilter) {\n            page_objects_1.resourcesPage.filterByType('article');\n            page_objects_1.resourcesPage.takeScreenshot('type-filter');\n        }\n        else {\n            cy.log('Type filter not available');\n        }\n    });\n    // Check for topic filter\n    page_objects_1.resourcesPage.isTopicFilterAvailable().then(function (hasTopicFilter) {\n        if (hasTopicFilter) {\n            page_objects_1.resourcesPage.filterByTopic('testing');\n            page_objects_1.resourcesPage.takeScreenshot('topic-filter');\n        }\n        else {\n            cy.log('Topic filter not available');\n        }\n    });\n    // Check for difficulty filter\n    page_objects_1.resourcesPage.isDifficultyFilterAvailable().then(function (hasDifficultyFilter) {\n        if (hasDifficultyFilter) {\n            page_objects_1.resourcesPage.filterByDifficulty('beginner');\n            page_objects_1.resourcesPage.takeScreenshot('difficulty-filter');\n        }\n        else {\n            cy.log('Difficulty filter not available');\n        }\n    });\n    // Check for status filter\n    page_objects_1.resourcesPage.isStatusFilterAvailable().then(function (hasStatusFilter) {\n        if (hasStatusFilter) {\n            page_objects_1.resourcesPage.filterByStatus('completed');\n            page_objects_1.resourcesPage.takeScreenshot('status-filter');\n        }\n        else {\n            cy.log('Status filter not available');\n        }\n    });\n    // Clear filters if available\n    page_objects_1.resourcesPage.isClearFiltersAvailable().then(function (hasClearFilters) {\n        if (hasClearFilters) {\n            page_objects_1.resourcesPage.clearFilters();\n            page_objects_1.resourcesPage.takeScreenshot('cleared-filters');\n        }\n        else {\n            cy.log('Clear filters button not available');\n        }\n    });\n});",
              "err": {},
              "uuid": "bf044133-e0f3-4998-a12f-b53ae7f83932",
              "parentUUID": "2c1b1667-acea-403c-9ecf-6764e6a235a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c877f8a-dbaf-4816-9f94-ac1e822be010",
            "9fe4a4f7-4a56-4fae-929c-6010f0ae666f",
            "c4f3fff6-70ee-4586-9155-1ce60d00ae91",
            "d1c58179-529a-4784-9586-9c17773bf052",
            "d0c54b5c-3c94-4f3a-a4a3-0b4cdbdb30a1",
            "e4549b22-2d75-40c8-9772-294c91945c70",
            "bf044133-e0f3-4998-a12f-b53ae7f83932"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22749,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "e2e-testing/reports/mochawesome/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}