{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-25T11:14:21.491Z",
    "end": "2025-03-25T11:14:39.266Z",
    "duration": 17775,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c58007cc-3ade-4412-a360-ae20dc38c36e",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/learning-path.cy.ts",
      "file": "e2e-testing/cypress/e2e/learning-path.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8f4978be-2522-44bd-9aae-a2055bcaef95",
          "title": "Learning Path Management",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display learning path overview",
              "fullTitle": "Learning Path Management should display learning path overview",
              "timedOut": null,
              "duration": 2021,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should display learning path overview-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Take screenshot of learning path overview\n    page_objects_1.learningPathPage.takeScreenshot('learning-path-overview');\n    // Check if goals section is visible\n    page_objects_1.learningPathPage.isGoalsSectionVisible().then(function (isVisible) {\n        if (isVisible) {\n            cy.log('Goals section is visible');\n        }\n        else {\n            cy.log('Goals section is not visible');\n        }\n    });\n    // Check if milestones section is visible\n    page_objects_1.learningPathPage.isMilestonesSectionVisible().then(function (isVisible) {\n        if (isVisible) {\n            cy.log('Milestones section is visible');\n        }\n        else {\n            cy.log('Milestones section is not visible');\n        }\n    });\n    // Check if roadmap section is visible\n    page_objects_1.learningPathPage.isRoadmapSectionVisible().then(function (isVisible) {\n        if (isVisible) {\n            cy.log('Roadmap section is visible');\n        }\n        else {\n            cy.log('Roadmap section is not visible');\n        }\n    });\n});",
              "err": {},
              "uuid": "d1528f1a-5724-4dd7-96cc-baf0f6253a27",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow creating a new goal",
              "fullTitle": "Learning Path Management should allow creating a new goal",
              "timedOut": null,
              "duration": 2135,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should allow creating a new goal-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Create a new goal with unique title\n    var goalTitle = \"Test Goal \".concat(Date.now());\n    page_objects_1.learningPathPage.createGoal({\n        title: goalTitle,\n        description: 'This is a test goal created by Cypress',\n        targetDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now\n        priority: '8',\n        category: 'Testing'\n    });\n    // Verify goal was created successfully\n    page_objects_1.learningPathPage.hasSuccessNotification().then(function (hasSuccess) {\n        if (hasSuccess) {\n            cy.log('Goal created successfully');\n        }\n        else {\n            cy.log('No success notification displayed after creating goal');\n        }\n    });\n    // Verify goal appears in the list\n    page_objects_1.learningPathPage.goalExists(goalTitle).then(function (exists) {\n        cy.wrap(exists).should('be.true');\n    });\n});",
              "err": {},
              "uuid": "9da08cde-cecd-4e8d-8f98-8d7786e22c5f",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow editing an existing goal",
              "fullTitle": "Learning Path Management should allow editing an existing goal",
              "timedOut": null,
              "duration": 2053,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should allow editing an existing goal-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Check if goals exist before trying to edit\n    cy.get('body').then(function ($body) {\n        var hasGoals = $body.find('[data-testid=\"goal-item\"]').length > 0;\n        if (!hasGoals) {\n            cy.log('No goals found to edit, creating a test goal first');\n            // Create a test goal first\n            page_objects_1.learningPathPage.createGoal({\n                title: \"Test Goal to Edit \".concat(Date.now()),\n                description: 'This goal will be edited'\n            });\n        }\n        // Edit the first goal with a unique title\n        var updatedTitle = \"Updated Goal \".concat(Date.now());\n        page_objects_1.learningPathPage.editFirstGoal({\n            title: updatedTitle,\n            description: 'This goal was updated by Cypress'\n        });\n        // Verify goal was updated successfully\n        page_objects_1.learningPathPage.hasSuccessNotification().then(function (hasSuccess) {\n            if (hasSuccess) {\n                cy.log('Goal updated successfully');\n            }\n            else {\n                cy.log('No success notification displayed after updating goal');\n            }\n        });\n        // Verify updated goal appears in the list\n        page_objects_1.learningPathPage.goalExists(updatedTitle).then(function (exists) {\n            cy.wrap(exists).should('be.true');\n        });\n    });\n});",
              "err": {},
              "uuid": "d3845163-b45a-403c-9c17-392b227f164d",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow marking a goal as completed",
              "fullTitle": "Learning Path Management should allow marking a goal as completed",
              "timedOut": null,
              "duration": 2114,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should allow marking a goal as completed-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Check if goals exist before trying to complete\n    cy.get('body').then(function ($body) {\n        var hasGoals = $body.find('[data-testid=\"goal-item\"]').length > 0;\n        if (!hasGoals) {\n            cy.log('No goals found to complete, creating a test goal first');\n            // Create a test goal first\n            page_objects_1.learningPathPage.createGoal({\n                title: \"Test Goal to Complete \".concat(Date.now()),\n                description: 'This goal will be marked as completed'\n            });\n        }\n        // Mark the first goal as completed\n        page_objects_1.learningPathPage.completeFirstGoal();\n        // Verify goal was marked as completed\n        page_objects_1.learningPathPage.hasSuccessNotification().then(function (hasSuccess) {\n            if (hasSuccess) {\n                cy.log('Goal marked as completed successfully');\n            }\n            else {\n                cy.log('No success notification displayed after completing goal');\n            }\n        });\n        // Verify the goal shows a completed badge\n        cy.get('[data-testid=\"goal-item\"]').first().within(function () {\n            cy.get('[data-testid=\"completed-badge\"]').should('exist');\n        });\n    });\n});",
              "err": {},
              "uuid": "510aa624-9417-4417-a3e4-f10c5ded6f36",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow creating a new milestone",
              "fullTitle": "Learning Path Management should allow creating a new milestone",
              "timedOut": null,
              "duration": 2173,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should allow creating a new milestone-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Navigate to milestones tab\n    page_objects_1.learningPathPage.goToMilestonesTab();\n    page_objects_1.learningPathPage.takeScreenshot('milestones-tab');\n    // Create a new milestone with unique title\n    var milestoneTitle = \"Test Milestone \".concat(Date.now());\n    // Check if add milestone button exists\n    cy.get('body').then(function ($body) {\n        var hasAddMilestoneButton = $body.find('[data-testid=\"add-milestone\"]').length > 0;\n        if (hasAddMilestoneButton) {\n            page_objects_1.learningPathPage.createMilestone({\n                title: milestoneTitle,\n                description: 'This is a test milestone created by Cypress',\n                targetDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 14 days from now\n                verificationMethod: 'Cypress Test',\n                selectFirstResource: true\n            });\n            // Verify milestone was created successfully\n            page_objects_1.learningPathPage.hasSuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Milestone created successfully');\n                    // Verify milestone appears in the list\n                    cy.get('[data-testid=\"milestones-list\"]').contains(milestoneTitle).should('exist');\n                }\n                else {\n                    cy.log('No success notification displayed after creating milestone');\n                }\n            });\n        }\n        else {\n            cy.log('Add milestone button not found, skipping milestone creation');\n            page_objects_1.learningPathPage.takeScreenshot('no-add-milestone-button');\n        }\n    });\n});",
              "err": {},
              "uuid": "11414a21-bbfe-4a19-baef-8051ef6afe56",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow editing the roadmap",
              "fullTitle": "Learning Path Management should allow editing the roadmap",
              "timedOut": null,
              "duration": 2144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should allow editing the roadmap-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Navigate to roadmap tab\n    page_objects_1.learningPathPage.goToRoadmapTab();\n    page_objects_1.learningPathPage.takeScreenshot('roadmap-tab');\n    // Check if edit roadmap button exists\n    cy.get('body').then(function ($body) {\n        var hasEditRoadmapButton = $body.find('[data-testid=\"edit-roadmap\"]').length > 0;\n        if (hasEditRoadmapButton) {\n            // Edit the roadmap with unique title\n            var updatedTitle_1 = \"Updated Roadmap \".concat(Date.now());\n            page_objects_1.learningPathPage.editRoadmap({\n                title: updatedTitle_1,\n                description: 'This roadmap was updated by Cypress',\n                addPhase: true,\n                phaseTitle: 'Phase 1: Testing',\n                phaseDescription: 'First phase of testing',\n                addPhaseItem: true,\n                phaseItemTitle: 'Learn Cypress'\n            });\n            // Verify roadmap was updated successfully\n            page_objects_1.learningPathPage.hasSuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Roadmap updated successfully');\n                    // Verify updated roadmap appears\n                    cy.get('[data-testid=\"roadmap-title\"]').contains(updatedTitle_1).should('exist');\n                }\n                else {\n                    cy.log('No success notification displayed after updating roadmap');\n                }\n            });\n        }\n        else {\n            cy.log('Edit roadmap button not found, skipping roadmap editing');\n            page_objects_1.learningPathPage.takeScreenshot('no-edit-roadmap-button');\n        }\n    });\n});",
              "err": {},
              "uuid": "90661b89-1ad4-45ba-bfbc-3b1907bf2c04",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display learning path progress",
              "fullTitle": "Learning Path Management should display learning path progress",
              "timedOut": null,
              "duration": 2136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should display learning path progress-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Navigate to progress tab\n    page_objects_1.learningPathPage.goToProgressTab();\n    page_objects_1.learningPathPage.takeScreenshot('progress-tab');\n    // Check if progress charts are visible\n    page_objects_1.learningPathPage.areProgressChartsVisible().then(function (isVisible) {\n        if (isVisible) {\n            cy.log('Progress charts are visible');\n            // Test date range filter\n            page_objects_1.learningPathPage.filterProgressByLastMonth();\n            // Verify charts are still visible after filtering\n            page_objects_1.learningPathPage.areProgressChartsVisible().then(function (isStillVisible) {\n                cy.wrap(isStillVisible).should('be.true');\n            });\n        }\n        else {\n            cy.log('Progress charts are not visible');\n        }\n    });\n});",
              "err": {},
              "uuid": "469972d1-c78a-4841-b866-a92ecfe7a1f1",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow deleting a goal",
              "fullTitle": "Learning Path Management should allow deleting a goal",
              "timedOut": null,
              "duration": 2111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/learning-path.cy.ts/Learning Path Management-should allow deleting a goal-learning-path-not-loaded.png\"\n    ]\n  ]\n}",
              "code": "// Check if learning path page loaded properly\npage_objects_1.learningPathPage.isLearningPathLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Learning Path page not loaded properly, skipping test');\n        page_objects_1.learningPathPage.takeScreenshot('learning-path-not-loaded');\n        return;\n    }\n    // Check if goals exist before trying to delete\n    cy.get('body').then(function ($body) {\n        var hasGoals = $body.find('[data-testid=\"goal-item\"]').length > 0;\n        if (!hasGoals) {\n            cy.log('No goals found to delete, creating a test goal first');\n            // Create a test goal first\n            page_objects_1.learningPathPage.createGoal({\n                title: \"Test Goal to Delete \".concat(Date.now()),\n                description: 'This goal will be deleted'\n            });\n        }\n        // Get the title of the first goal before deleting\n        var goalTitle;\n        cy.get('[data-testid=\"goal-title\"]').first().invoke('text').then(function (text) {\n            goalTitle = text;\n            // Delete the first goal\n            page_objects_1.learningPathPage.deleteFirstGoal();\n            // Verify goal was deleted successfully\n            page_objects_1.learningPathPage.hasSuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Goal deleted successfully');\n                    // Verify the goal no longer appears in the list\n                    if (goalTitle) {\n                        page_objects_1.learningPathPage.goalExists(goalTitle).then(function (exists) {\n                            cy.wrap(exists).should('be.false');\n                        });\n                    }\n                }\n                else {\n                    cy.log('No success notification displayed after deleting goal');\n                }\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "91fecb56-97ca-450f-982c-4eaf781e2117",
              "parentUUID": "8f4978be-2522-44bd-9aae-a2055bcaef95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1528f1a-5724-4dd7-96cc-baf0f6253a27",
            "9da08cde-cecd-4e8d-8f98-8d7786e22c5f",
            "d3845163-b45a-403c-9c17-392b227f164d",
            "510aa624-9417-4417-a3e4-f10c5ded6f36",
            "11414a21-bbfe-4a19-baef-8051ef6afe56",
            "90661b89-1ad4-45ba-bfbc-3b1907bf2c04",
            "469972d1-c78a-4841-b866-a92ecfe7a1f1",
            "91fecb56-97ca-450f-982c-4eaf781e2117"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16887,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "e2e-testing/reports/mochawesome/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}