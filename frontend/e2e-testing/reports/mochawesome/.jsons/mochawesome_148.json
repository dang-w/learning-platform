{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-31T14:35:19.033Z",
    "end": "2025-03-31T14:35:23.189Z",
    "duration": 4156,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "1989eb52-e274-4086-8706-d1e275ff8f99",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/knowledge.cy.ts",
      "file": "e2e-testing/cypress/e2e/knowledge.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e5daebe-309a-4cd8-8066-279507341fd3",
          "title": "Knowledge Management E2E Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display concepts list and navigation",
              "fullTitle": "Knowledge Management E2E Tests should display concepts list and navigation",
              "timedOut": null,
              "duration": 1235,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/knowledge.cy.ts/Knowledge Management E2E Tests -- should display concepts list and navigation (failed).png\"\n    ],\n    [\n      \"/knowledge.cy.ts/Knowledge Management E2E Tests -- should display concepts list and navigation (failed) (attempt 2).png\"\n    ],\n    [\n      \"/knowledge.cy.ts/Knowledge Management E2E Tests -- should display concepts list and navigation -- before each hook (failed) (attempt 3).png\"\n    ]\n  ]\n}",
              "code": "// Verify concepts page is loaded\npage_objects_1.conceptsPage.isConceptsPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Concepts page not loaded properly, skipping test');\n        page_objects_1.conceptsPage.takeScreenshot('concepts-not-loaded');\n        return;\n    }\n    // Take a screenshot of the concepts page\n    page_objects_1.conceptsPage.takeScreenshot('concepts-list');\n    // Check for concept count\n    page_objects_1.conceptsPage.getConceptCount().then(function (count) {\n        cy.log(\"Found \".concat(count, \" concepts\"));\n    });\n    // Check if search functionality is available\n    cy.get('body').then(function ($body) {\n        if ($body.find('[data-testid=\"search-concepts-input\"]').length > 0) {\n            page_objects_1.conceptsPage.searchConcepts('test');\n            page_objects_1.conceptsPage.takeScreenshot('search-results');\n        }\n        else {\n            cy.log('Search functionality not found on the page');\n        }\n    });\n    // Check for other navigation options\n    cy.get('body').then(function ($body) {\n        // Check for review navigation if available\n        if ($body.find('[data-testid=\"nav-knowledge-review\"]').length > 0) {\n            page_objects_1.conceptsPage.navigateToReview();\n            page_objects_1.conceptsPage.takeScreenshot('review-section');\n            cy.go('back');\n        }\n        // Check for statistics navigation if available\n        if ($body.find('[data-testid=\"nav-knowledge-stats\"]').length > 0) {\n            page_objects_1.conceptsPage.navigateToStatistics();\n            page_objects_1.conceptsPage.takeScreenshot('stats-section');\n            cy.go('back');\n        }\n    });\n});",
              "err": {
                "message": "CypressError: The following error originated from your test code, not from Cypress.\n\n  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.visit()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\nWhen Cypress detects uncaught errors originating from your test code it will automatically fail the current test.\n\nhttps://on.cypress.io/returning-promise-and-commands-in-another-command\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Knowledge Management E2E Tests`",
                "estack": "CypressError: The following error originated from your test code, not from Cypress.\n\n  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.visit()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\nWhen Cypress detects uncaught errors originating from your test code it will automatically fail the current test.\n\nhttps://on.cypress.io/returning-promise-and-commands-in-another-command\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Knowledge Management E2E Tests`\n    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)\n    at $Cy.eval (webpack:///./cypress/e2e/knowledge.cy.ts:29:0)\n    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)\n    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)\n    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)\n    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)\n    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)\n    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)\n    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)\n    at onUncaughtError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_43e3ffb8._.js:1850:50)\n    at onCaughtError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_43e3ffb8._.js:1806:16)\n    at logCaughtError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:6961:13)\n    at runWithFiberInDEV (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:3501:74)\n    at inst.componentDidCatch.update.callback (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:7002:13)\n    at callCallback (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:5206:18)\n    at commitCallbacks (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:5214:130)\n    at runWithFiberInDEV (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:3501:74)\n    at commitClassCallbacks (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:7935:17)\n    at commitLayoutEffectOnFiber (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:8243:31)\n    at recursivelyTraverseLayoutEffects (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:8700:105)\n    at commitLayoutEffectOnFiber (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:8231:17)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/support/commands.ts:234:0)\n    at wrapped (http://localhost:3000/__cypress/runner/cypress_runner.js:138854:43)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/support/commands.ts:234:0)\n    at wrapped (http://localhost:3000/__cypress/runner/cypress_runner.js:138854:43)",
                "diff": null
              },
              "uuid": "4bdb6d49-f6d1-487a-873c-2186175f2482",
              "parentUUID": "2e5daebe-309a-4cd8-8066-279507341fd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create, view, edit, and delete a concept",
              "fullTitle": "Knowledge Management E2E Tests should create, view, edit, and delete a concept",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if concepts page loaded properly\npage_objects_1.conceptsPage.isConceptsPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Concepts page not loaded properly, skipping test');\n        page_objects_1.conceptsPage.takeScreenshot('concepts-not-loaded');\n        return;\n    }\n    // Check if the add concept button is available\n    page_objects_1.conceptsPage.isAddConceptButtonAvailable().then(function (isAvailable) {\n        if (!isAvailable) {\n            cy.log('Add concept button not available, skipping test');\n            return;\n        }\n        // Click add concept button\n        page_objects_1.conceptsPage.clickAddConcept();\n        // Wait for the form to load\n        page_objects_1.conceptsPage.isConceptFormLoaded().then(function (isFormLoaded) {\n            if (!isFormLoaded) {\n                cy.log('Concept form not loaded properly, skipping test');\n                return;\n            }\n            // Create unique title to identify the concept\n            var conceptTitle = \"Test Concept \".concat(Date.now());\n            // Fill and submit the form\n            page_objects_1.conceptsPage.fillConceptForm({\n                title: conceptTitle,\n                content: '# Test Concept\\n\\nThis is a test concept created by Cypress.',\n                difficulty: 'intermediate',\n                topics: ['testing', 'cypress']\n            });\n            page_objects_1.conceptsPage.submitConceptForm();\n            // Verify success notification\n            page_objects_1.conceptsPage.verifySuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Concept created successfully');\n                }\n                else {\n                    cy.log('No success notification displayed after creating concept');\n                }\n            });\n            // Verify the concept exists in the list\n            page_objects_1.conceptsPage.verifyConceptExists(conceptTitle).then(function (exists) {\n                cy.wrap(exists).should('be.true');\n                // Click on the concept to view details\n                page_objects_1.conceptsPage.clickConcept(conceptTitle);\n                // Check if the concept detail view is visible\n                page_objects_1.conceptsPage.isConceptDetailVisible().then(function (isDetailVisible) {\n                    if (!isDetailVisible) {\n                        cy.log('Concept detail view not visible, skipping detail check');\n                        return;\n                    }\n                    // Verify concept details\n                    page_objects_1.conceptsPage.verifyConceptDetails({\n                        title: conceptTitle,\n                        content: 'This is a test concept created by Cypress.'\n                    });\n                    // Edit the concept if edit button is available\n                    page_objects_1.conceptsPage.isEditButtonAvailable().then(function (isEditAvailable) {\n                        if (!isEditAvailable) {\n                            cy.log('Edit button not available, skipping edit test');\n                            return;\n                        }\n                        // Edit the concept\n                        page_objects_1.conceptsPage.clickEditButton();\n                        var updatedTitle = \"Updated Concept \".concat(Date.now());\n                        page_objects_1.conceptsPage.updateConceptTitle(updatedTitle);\n                        page_objects_1.conceptsPage.updateConceptContent('# Updated Concept\\n\\nThis concept was updated by Cypress.');\n                        page_objects_1.conceptsPage.saveConceptChanges();\n                        // Verify success notification for update\n                        page_objects_1.conceptsPage.verifySuccessNotification().then(function (hasUpdateSuccess) {\n                            if (hasUpdateSuccess) {\n                                cy.log('Concept updated successfully');\n                            }\n                            else {\n                                cy.log('No success notification displayed after updating concept');\n                            }\n                        });\n                        // Delete the concept if delete button is available\n                        page_objects_1.conceptsPage.isDeleteButtonAvailable().then(function (isDeleteAvailable) {\n                            if (!isDeleteAvailable) {\n                                cy.log('Delete button not available, skipping delete test');\n                                return;\n                            }\n                            // Delete the concept\n                            page_objects_1.conceptsPage.clickDeleteButton();\n                            page_objects_1.conceptsPage.confirmDeletion();\n                            // Verify success notification for deletion\n                            page_objects_1.conceptsPage.verifySuccessNotification().then(function (hasDeleteSuccess) {\n                                if (hasDeleteSuccess) {\n                                    cy.log('Concept deleted successfully');\n                                }\n                                else {\n                                    cy.log('No success notification displayed after deleting concept');\n                                }\n                            });\n                            // Verify the concept is no longer in the list\n                            page_objects_1.conceptsPage.verifyConceptExists(updatedTitle).then(function (stillExists) {\n                                cy.wrap(stillExists).should('be.false');\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "c7d765db-0d60-4276-ac7b-a79b88ff8c50",
              "parentUUID": "2e5daebe-309a-4cd8-8066-279507341fd3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should use filtering and sorting options if available",
              "fullTitle": "Knowledge Management E2E Tests should use filtering and sorting options if available",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if concepts page loaded properly\npage_objects_1.conceptsPage.isConceptsPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Concepts page not loaded properly, skipping test');\n        page_objects_1.conceptsPage.takeScreenshot('concepts-not-loaded');\n        return;\n    }\n    // Check for topic filter\n    page_objects_1.conceptsPage.isTopicFilterAvailable().then(function (hasTopicFilter) {\n        if (hasTopicFilter) {\n            page_objects_1.conceptsPage.filterByTopic('testing');\n            page_objects_1.conceptsPage.takeScreenshot('topic-filter');\n        }\n        else {\n            cy.log('Topic filter not available');\n        }\n    });\n    // Check for difficulty filter\n    page_objects_1.conceptsPage.isDifficultyFilterAvailable().then(function (hasDifficultyFilter) {\n        if (hasDifficultyFilter) {\n            page_objects_1.conceptsPage.filterByDifficulty('beginner');\n            page_objects_1.conceptsPage.takeScreenshot('difficulty-filter');\n        }\n        else {\n            cy.log('Difficulty filter not available');\n        }\n    });\n    // Check for status filter\n    page_objects_1.conceptsPage.isStatusFilterAvailable().then(function (hasStatusFilter) {\n        if (hasStatusFilter) {\n            page_objects_1.conceptsPage.filterByStatus('active');\n            page_objects_1.conceptsPage.takeScreenshot('status-filter');\n        }\n        else {\n            cy.log('Status filter not available');\n        }\n    });\n    // Clear filters if available\n    page_objects_1.conceptsPage.isClearFiltersAvailable().then(function (hasClearFilters) {\n        if (hasClearFilters) {\n            page_objects_1.conceptsPage.clearFilters();\n            page_objects_1.conceptsPage.takeScreenshot('cleared-filters');\n        }\n        else {\n            cy.log('Clear filters button not available');\n        }\n    });\n});",
              "err": {},
              "uuid": "8153d0a4-28b7-4b56-bdc5-ad8983f8b4c6",
              "parentUUID": "2e5daebe-309a-4cd8-8066-279507341fd3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should access spaced repetition features if available",
              "fullTitle": "Knowledge Management E2E Tests should access spaced repetition features if available",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if concepts page loaded properly\npage_objects_1.conceptsPage.isConceptsPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Concepts page not loaded properly, skipping test');\n        page_objects_1.conceptsPage.takeScreenshot('concepts-not-loaded');\n        return;\n    }\n    // Check if review button is available\n    page_objects_1.conceptsPage.isReviewButtonAvailable().then(function (hasReviewButton) {\n        if (!hasReviewButton) {\n            cy.log('Review functionality not available, skipping test');\n            return;\n        }\n        // Navigate to review\n        page_objects_1.conceptsPage.clickReviewButton();\n        // Check if there are concepts to review\n        page_objects_1.conceptsPage.hasConceptsToReview().then(function (hasConceptsToReview) {\n            if (!hasConceptsToReview) {\n                cy.log('No concepts available for review, skipping test');\n                return;\n            }\n            // Complete a review session\n            page_objects_1.conceptsPage.completeReviewSession();\n            // Verify review completion\n            page_objects_1.conceptsPage.verifyReviewCompletion().then(function (isComplete) {\n                if (isComplete) {\n                    cy.log('Review session completed successfully');\n                }\n                else {\n                    cy.log('Review session completion cannot be verified');\n                }\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "d4763e1a-c0e9-4d3c-b164-d7542b79b342",
              "parentUUID": "2e5daebe-309a-4cd8-8066-279507341fd3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4bdb6d49-f6d1-487a-873c-2186175f2482"
          ],
          "pending": [],
          "skipped": [
            "c7d765db-0d60-4276-ac7b-a79b88ff8c50",
            "8153d0a4-28b7-4b56-bdc5-ad8983f8b4c6",
            "d4763e1a-c0e9-4d3c-b164-d7542b79b342"
          ],
          "duration": 1235,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "e2e-testing/reports/mochawesome/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}