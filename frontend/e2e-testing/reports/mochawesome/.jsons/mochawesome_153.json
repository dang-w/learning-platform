{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-31T14:35:53.014Z",
    "end": "2025-03-31T14:35:57.636Z",
    "duration": 4622,
    "testsRegistered": 7,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 6,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "d44c5508-0eb2-4a63-bf14-c6182d66e901",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/resources.cy.ts",
      "file": "e2e-testing/cypress/e2e/resources.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
          "title": "Resources Management E2E Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display resources list and search functionality",
              "fullTitle": "Resources Management E2E Tests should display resources list and search functionality",
              "timedOut": null,
              "duration": 1080,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests -- should display resources list and search functionality (failed).png\"\n    ],\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests -- should display resources list and search functionality (failed) (attempt 2).png\"\n    ],\n    [\n      \"/resources.cy.ts/Resources Management E2E Tests -- should display resources list and search functionality -- before each hook (failed) (attempt 3).png\"\n    ]\n  ]\n}",
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Take a screenshot of the resources page\n    page_objects_1.resourcesPage.takeScreenshot('resources-list');\n    // Get resource count to verify loading\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        cy.log(\"Found \".concat(count, \" resources\"));\n    });\n    // Check if search functionality is available\n    cy.get('body').then(function ($body) {\n        if ($body.find('[data-testid=\"search-input\"]').length > 0) {\n            page_objects_1.resourcesPage.searchResources('test');\n            page_objects_1.resourcesPage.takeScreenshot('search-results');\n        }\n        else {\n            cy.log('Search functionality not found on the page');\n        }\n    });\n});",
              "err": {
                "message": "CypressError: The following error originated from your test code, not from Cypress.\n\n  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.visit()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\nWhen Cypress detects uncaught errors originating from your test code it will automatically fail the current test.\n\nhttps://on.cypress.io/returning-promise-and-commands-in-another-command\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Resources Management E2E Tests`",
                "estack": "CypressError: The following error originated from your test code, not from Cypress.\n\n  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.visit()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\nWhen Cypress detects uncaught errors originating from your test code it will automatically fail the current test.\n\nhttps://on.cypress.io/returning-promise-and-commands-in-another-command\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Resources Management E2E Tests`\n    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)\n    at $Cy.eval (webpack:///./cypress/e2e/resources.cy.ts:29:0)\n    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)\n    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)\n    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)\n    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)\n    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)\n    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)\n    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)\n    at onUncaughtError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_43e3ffb8._.js:1850:50)\n    at onCaughtError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_client_43e3ffb8._.js:1806:16)\n    at logCaughtError (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:6961:13)\n    at runWithFiberInDEV (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:3501:74)\n    at inst.componentDidCatch.update.callback (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:7002:13)\n    at callCallback (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:5206:18)\n    at commitCallbacks (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:5214:130)\n    at runWithFiberInDEV (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:3501:74)\n    at commitClassCallbacks (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:7935:17)\n    at commitLayoutEffectOnFiber (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:8243:31)\n    at recursivelyTraverseLayoutEffects (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:8700:105)\n    at commitLayoutEffectOnFiber (http://localhost:3000/_next/static/chunks/node_modules_next_dist_compiled_2ce9398a._.js:8231:17)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/support/commands.ts:234:0)\n    at wrapped (http://localhost:3000/__cypress/runner/cypress_runner.js:138854:43)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/support/commands.ts:234:0)\n    at wrapped (http://localhost:3000/__cypress/runner/cypress_runner.js:138854:43)",
                "diff": null
              },
              "uuid": "a6ce9147-d716-45a8-9835-b9d9166a66a0",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new resource with manual entry",
              "fullTitle": "Resources Management E2E Tests should create a new resource with manual entry",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Check if add resource button is available\n    page_objects_1.resourcesPage.isAddResourceButtonAvailable().then(function (isAvailable) {\n        if (!isAvailable) {\n            cy.log('Add resource button not available, skipping test');\n            return;\n        }\n        // Click add resource button\n        page_objects_1.resourcesPage.clickAddResource();\n        // Create unique title to identify the resource\n        var resourceTitle = \"Test Resource \".concat(Date.now());\n        // Fill the resource form\n        page_objects_1.resourcesPage.fillResourceForm({\n            title: resourceTitle,\n            url: 'https://example.com/test-resource',\n            description: 'This is a test resource created by Cypress',\n            type: 'article'\n        });\n        // Submit the form\n        page_objects_1.resourcesPage.submitResourceForm();\n        // Verify success notification\n        page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n            if (hasSuccess) {\n                cy.log('Resource created successfully');\n            }\n            else {\n                cy.log('No success notification displayed after creating resource');\n            }\n        });\n        // Verify resource exists in the list\n        page_objects_1.resourcesPage.resourceExists(resourceTitle).then(function (exists) {\n            cy.wrap(exists).should('be.true');\n        });\n    });\n});",
              "err": {},
              "uuid": "7f1ca218-88be-4ba1-a354-46ca12504785",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should create a resource using URL metadata extraction if available",
              "fullTitle": "Resources Management E2E Tests should create a resource using URL metadata extraction if available",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Navigate to the new resource page\n    page_objects_1.resourcesPage.visitNewResource();\n    // Check if URL input is available\n    page_objects_1.resourcesPage.isUrlInputAvailable().then(function (isAvailable) {\n        if (!isAvailable) {\n            cy.log('URL input not available, skipping test');\n            return;\n        }\n        // Check if extract metadata button is available\n        page_objects_1.resourcesPage.isExtractMetadataButtonAvailable().then(function (hasExtractButton) {\n            if (!hasExtractButton) {\n                cy.log('Extract metadata button not available, skipping test');\n                return;\n            }\n            // Enter URL and extract metadata\n            page_objects_1.resourcesPage.enterUrlAndExtractMetadata('https://example.com');\n            // Check if metadata was populated\n            page_objects_1.resourcesPage.isMetadataPopulated().then(function (isPopulated) {\n                if (isPopulated) {\n                    cy.log('Metadata successfully extracted and populated');\n                    // Create unique title to identify the resource\n                    var resourceTitle = \"Metadata Resource \".concat(Date.now());\n                    // Update the title to be unique\n                    page_objects_1.resourcesPage.enterManualDetails(resourceTitle, 'Description from metadata with manual edits');\n                    // Select resource type if not automatically selected\n                    page_objects_1.resourcesPage.selectResourceType('article');\n                    // Submit the form\n                    page_objects_1.resourcesPage.submitResourceForm();\n                    // Verify success notification\n                    page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n                        if (hasSuccess) {\n                            cy.log('Resource with metadata created successfully');\n                        }\n                        else {\n                            cy.log('No success notification displayed after creating resource with metadata');\n                        }\n                    });\n                }\n                else {\n                    cy.log('Metadata extraction may have failed or feature not fully implemented');\n                    cy.log('Falling back to manual entry');\n                    // Create unique title to identify the resource\n                    var resourceTitle = \"Metadata Failed Resource \".concat(Date.now());\n                    // Enter manual details\n                    page_objects_1.resourcesPage.enterManualDetails(resourceTitle, 'Manual entry after metadata extraction failed');\n                    // Select resource type\n                    page_objects_1.resourcesPage.selectResourceType('article');\n                    // Submit the form\n                    page_objects_1.resourcesPage.submitResourceForm();\n                }\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "a64ca4cf-7d9b-4021-85f3-9637fc3008f1",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should edit an existing resource",
              "fullTitle": "Resources Management E2E Tests should edit an existing resource",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Get resource count to see if there are any resources to edit\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        if (count === 0) {\n            cy.log('No resources found to edit, creating one first');\n            // Navigate to new resource page\n            page_objects_1.resourcesPage.visitNewResource();\n            // Create a resource to edit\n            var resourceTitle = \"Resource to Edit \".concat(Date.now());\n            page_objects_1.resourcesPage.fillResourceForm({\n                title: resourceTitle,\n                url: 'https://example.com/resource-to-edit',\n                description: 'This resource will be edited',\n                type: 'article'\n            });\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Go back to resources list\n            page_objects_1.resourcesPage.visitResources();\n        }\n        // Get the title of the first resource before editing\n        page_objects_1.resourcesPage.getFirstResourceTitle().then(function (originalTitle) {\n            if (!originalTitle) {\n                cy.log('Failed to get the first resource title, skipping test');\n                return;\n            }\n            // Click edit on the first resource\n            page_objects_1.resourcesPage.clickEditOnFirstResource();\n            // Update the resource title\n            var updatedTitle = \"Updated Resource \".concat(Date.now());\n            page_objects_1.resourcesPage.updateResourceTitle(updatedTitle);\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Verify success notification\n            page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Resource updated successfully');\n                }\n                else {\n                    cy.log('No success notification displayed after updating resource');\n                }\n            });\n            // Verify the updated resource exists in the list\n            page_objects_1.resourcesPage.resourceExists(updatedTitle).then(function (exists) {\n                cy.wrap(exists).should('be.true');\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "9be2abcf-9167-4de3-92af-0b4160b66368",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should mark a resource as completed",
              "fullTitle": "Resources Management E2E Tests should mark a resource as completed",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Get resource count to see if there are any resources to mark as completed\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        if (count === 0) {\n            cy.log('No resources found to mark as completed, creating one first');\n            // Navigate to new resource page\n            page_objects_1.resourcesPage.visitNewResource();\n            // Create a resource to mark as completed\n            var resourceTitle = \"Resource to Complete \".concat(Date.now());\n            page_objects_1.resourcesPage.fillResourceForm({\n                title: resourceTitle,\n                url: 'https://example.com/resource-to-complete',\n                description: 'This resource will be marked as completed',\n                type: 'article'\n            });\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Go back to resources list\n            page_objects_1.resourcesPage.visitResources();\n        }\n        // Mark the first resource as completed\n        page_objects_1.resourcesPage.markFirstResourceAsCompleted('Completed as part of Cypress test');\n        // Verify success notification\n        page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n            if (hasSuccess) {\n                cy.log('Resource marked as completed successfully');\n            }\n            else {\n                cy.log('No success notification displayed after marking resource as completed');\n            }\n        });\n        // Verify the resource is marked as completed\n        page_objects_1.resourcesPage.isFirstResourceCompleted().then(function (isCompleted) {\n            cy.wrap(isCompleted).should('be.true');\n        });\n    });\n});",
              "err": {},
              "uuid": "471bb56f-624a-462a-8b11-d2b713656986",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should delete a resource",
              "fullTitle": "Resources Management E2E Tests should delete a resource",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Get resource count to see if there are any resources to delete\n    page_objects_1.resourcesPage.getResourceCount().then(function (count) {\n        if (count === 0) {\n            cy.log('No resources found to delete, creating one first');\n            // Navigate to new resource page\n            page_objects_1.resourcesPage.visitNewResource();\n            // Create a resource to delete\n            var resourceTitle = \"Resource to Delete \".concat(Date.now());\n            page_objects_1.resourcesPage.fillResourceForm({\n                title: resourceTitle,\n                url: 'https://example.com/resource-to-delete',\n                description: 'This resource will be deleted',\n                type: 'article'\n            });\n            // Submit the form\n            page_objects_1.resourcesPage.submitResourceForm();\n            // Go back to resources list\n            page_objects_1.resourcesPage.visitResources();\n        }\n        // Get the title of the first resource before deleting\n        page_objects_1.resourcesPage.getFirstResourceTitle().then(function (originalTitle) {\n            if (!originalTitle) {\n                cy.log('Failed to get the first resource title, skipping test');\n                return;\n            }\n            // Delete the first resource\n            page_objects_1.resourcesPage.deleteFirstResource();\n            // Verify success notification\n            page_objects_1.resourcesPage.verifySuccessNotification().then(function (hasSuccess) {\n                if (hasSuccess) {\n                    cy.log('Resource deleted successfully');\n                }\n                else {\n                    cy.log('No success notification displayed after deleting resource');\n                }\n            });\n            // Verify the resource no longer exists in the list\n            page_objects_1.resourcesPage.resourceExists(originalTitle).then(function (exists) {\n                cy.wrap(exists).should('be.false');\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "c6c22b1f-2c19-423e-bf18-68d24a00eb43",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should use filtering options if available",
              "fullTitle": "Resources Management E2E Tests should use filtering options if available",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if resources page loaded properly\npage_objects_1.resourcesPage.isResourcesPageLoaded().then(function (isLoaded) {\n    if (!isLoaded) {\n        cy.log('Resources page not loaded properly, skipping test');\n        page_objects_1.resourcesPage.takeScreenshot('resources-not-loaded');\n        return;\n    }\n    // Check for type filter\n    page_objects_1.resourcesPage.isTypeFilterAvailable().then(function (hasTypeFilter) {\n        if (hasTypeFilter) {\n            page_objects_1.resourcesPage.filterByType('article');\n            page_objects_1.resourcesPage.takeScreenshot('type-filter');\n        }\n        else {\n            cy.log('Type filter not available');\n        }\n    });\n    // Check for topic filter\n    page_objects_1.resourcesPage.isTopicFilterAvailable().then(function (hasTopicFilter) {\n        if (hasTopicFilter) {\n            page_objects_1.resourcesPage.filterByTopic('testing');\n            page_objects_1.resourcesPage.takeScreenshot('topic-filter');\n        }\n        else {\n            cy.log('Topic filter not available');\n        }\n    });\n    // Check for difficulty filter\n    page_objects_1.resourcesPage.isDifficultyFilterAvailable().then(function (hasDifficultyFilter) {\n        if (hasDifficultyFilter) {\n            page_objects_1.resourcesPage.filterByDifficulty('beginner');\n            page_objects_1.resourcesPage.takeScreenshot('difficulty-filter');\n        }\n        else {\n            cy.log('Difficulty filter not available');\n        }\n    });\n    // Check for status filter\n    page_objects_1.resourcesPage.isStatusFilterAvailable().then(function (hasStatusFilter) {\n        if (hasStatusFilter) {\n            page_objects_1.resourcesPage.filterByStatus('completed');\n            page_objects_1.resourcesPage.takeScreenshot('status-filter');\n        }\n        else {\n            cy.log('Status filter not available');\n        }\n    });\n    // Clear filters if available\n    page_objects_1.resourcesPage.isClearFiltersAvailable().then(function (hasClearFilters) {\n        if (hasClearFilters) {\n            page_objects_1.resourcesPage.clearFilters();\n            page_objects_1.resourcesPage.takeScreenshot('cleared-filters');\n        }\n        else {\n            cy.log('Clear filters button not available');\n        }\n    });\n});",
              "err": {},
              "uuid": "8d029df4-6244-40ef-bc43-eec2c6d0e29c",
              "parentUUID": "f3f8ecd1-96f5-41b3-bed9-6d276b875215",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a6ce9147-d716-45a8-9835-b9d9166a66a0"
          ],
          "pending": [],
          "skipped": [
            "7f1ca218-88be-4ba1-a354-46ca12504785",
            "a64ca4cf-7d9b-4021-85f3-9637fc3008f1",
            "9be2abcf-9167-4de3-92af-0b4160b66368",
            "471bb56f-624a-462a-8b11-d2b713656986",
            "c6c22b1f-2c19-423e-bf18-68d24a00eb43",
            "8d029df4-6244-40ef-bc43-eec2c6d0e29c"
          ],
          "duration": 1080,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "e2e-testing/reports/mochawesome/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}