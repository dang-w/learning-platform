<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="44.804" tests="5" failures="5">
  <testsuite name="Root Suite" timestamp="2025-03-31T14:42:33" tests="0" file="e2e-testing/cypress/e2e/analytics.cy.ts" time="0.000" failures="0">
  </testsuite>
  <testsuite name="Progress Analytics" timestamp="2025-03-31T14:42:33" tests="5" time="44.772" failures="5">
    <testcase name="Progress Analytics should display analytics overview" time="2.976" classname="should display analytics overview">
      <failure message="The following error originated from your test code, not from Cypress.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.screenshot()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.screenshot()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)
    at $Cy.eval (webpack:///./cypress/e2e/analytics.cy.ts:18:0)
    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)
    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)
    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)
    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)
    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)
    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)
    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)]]></failure>
    </testcase>
    <testcase name="Progress Analytics should allow filtering analytics by date range" time="2.906" classname="should allow filtering analytics by date range">
      <failure message="The following error originated from your test code, not from Cypress.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.screenshot()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.screenshot()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)
    at $Cy.eval (webpack:///./cypress/e2e/analytics.cy.ts:18:0)
    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)
    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)
    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)
    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)
    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)
    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)
    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)]]></failure>
    </testcase>
    <testcase name="Progress Analytics should display various analytics tabs" time="2.956" classname="should display various analytics tabs">
      <failure message="The following error originated from your test code, not from Cypress.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.screenshot()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.screenshot()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)
    at $Cy.eval (webpack:///./cypress/e2e/analytics.cy.ts:18:0)
    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)
    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)
    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)
    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)
    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)
    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)
    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)]]></failure>
    </testcase>
    <testcase name="Progress Analytics should allow exporting analytics data" time="2.990" classname="should allow exporting analytics data">
      <failure message="The following error originated from your test code, not from Cypress.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.screenshot()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.screenshot()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)
    at $Cy.eval (webpack:///./cypress/e2e/analytics.cy.ts:18:0)
    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)
    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)
    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)
    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)
    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)
    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)
    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)]]></failure>
    </testcase>
    <testcase name="Progress Analytics should capture all analytics charts for documentation" time="2.914" classname="should capture all analytics charts for documentation">
      <failure message="The following error originated from your test code, not from Cypress.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.screenshot()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.screenshot()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)
    at $Cy.eval (webpack:///./cypress/e2e/analytics.cy.ts:18:0)
    at listener (http://localhost:3000/__cypress/runner/cypress_runner.js:140914:19)
    at arrayMap (http://localhost:3000/__cypress/runner/cypress_runner.js:18631:23)
    at map (http://localhost:3000/__cypress/runner/cypress_runner.js:27600:14)
    at $Cy.emitMap (http://localhost:3000/__cypress/runner/cypress_runner.js:140916:14)
    at parent.<computed> [as emitMap] (http://localhost:3000/__cypress/runner/cypress_runner.js:140879:32)
    at $Cypress.action (http://localhost:3000/__cypress/runner/cypress_runner.js:41667:21)
    at $Cy.onUncaughtException (http://localhost:3000/__cypress/runner/cypress_runner.js:139049:38)
    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:139225:28)]]></failure>
    </testcase>
  </testsuite>
</testsuites>