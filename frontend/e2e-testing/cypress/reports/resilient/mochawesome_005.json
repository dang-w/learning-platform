{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-20T10:21:35.217Z",
    "end": "2025-03-20T10:21:36.939Z",
    "duration": 1722,
    "testsRegistered": 7,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 6,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "60fdcd0b-395e-4b58-a05b-40e0123b4064",
      "title": "",
      "fullFile": "e2e-testing/cypress/e2e/knowledge.cy.ts",
      "file": "e2e-testing/cypress/e2e/knowledge.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
          "title": "Knowledge Management",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display concepts list and allow filtering",
              "fullTitle": "Knowledge Management should display concepts list and allow filtering",
              "timedOut": null,
              "duration": 479,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Check if concepts list exists\ncy.get('body').then(function ($body) {\n    var hasConceptsList = $body.find('[data-testid=\"concepts-list\"]').length > 0;\n    if (!hasConceptsList) {\n        cy.log('Concepts list not found - it may not be implemented yet');\n        return;\n    }\n    // Test filtering by topic if the filter exists\n    if ($body.find('[data-testid=\"filter-topic\"]').length > 0) {\n        cy.get('[data-testid=\"filter-topic\"]').click();\n        // Check if the specific filter option exists\n        cy.get('body').then(function ($updatedBody) {\n            if ($updatedBody.find('[data-testid=\"filter-topic-python\"]').length > 0) {\n                cy.get('[data-testid=\"filter-topic-python\"]').click();\n                cy.url().should('include', 'topic=python');\n            }\n            else {\n                cy.log('Python topic filter not found - it may not be implemented yet');\n            }\n        });\n    }\n    // Test filtering by difficulty if the filter exists\n    if ($body.find('[data-testid=\"filter-difficulty\"]').length > 0) {\n        cy.get('[data-testid=\"filter-difficulty\"]').click();\n        // Check if the specific filter option exists\n        cy.get('body').then(function ($updatedBody) {\n            if ($updatedBody.find('[data-testid=\"filter-difficulty-beginner\"]').length > 0) {\n                cy.get('[data-testid=\"filter-difficulty-beginner\"]').click();\n                cy.url().should('include', 'difficulty=beginner');\n            }\n            else {\n                cy.log('Beginner difficulty filter not found - it may not be implemented yet');\n            }\n        });\n    }\n    // Test filtering by review status if the filter exists\n    if ($body.find('[data-testid=\"filter-status\"]').length > 0) {\n        cy.get('[data-testid=\"filter-status\"]').click();\n        // Check if the specific filter option exists\n        cy.get('body').then(function ($updatedBody) {\n            if ($updatedBody.find('[data-testid=\"filter-status-due\"]').length > 0) {\n                cy.get('[data-testid=\"filter-status-due\"]').click();\n                cy.url().should('include', 'status=due');\n            }\n            else {\n                cy.log('Due status filter not found - it may not be implemented yet');\n            }\n        });\n    }\n    // Clear filters if the button exists\n    if ($body.find('[data-testid=\"clear-filters\"]').length > 0) {\n        cy.get('[data-testid=\"clear-filters\"]').click();\n        cy.url().should('not.include', 'topic=');\n        cy.url().should('not.include', 'difficulty=');\n        cy.url().should('not.include', 'status=');\n    }\n});",
              "err": {
                "message": "CypressError: Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.request()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\nhttps://on.cypress.io/returning-promise-and-commands-in-another-command\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Knowledge Management`",
                "estack": "CypressError: Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.request()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\nhttps://on.cypress.io/returning-promise-and-commands-in-another-command\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Knowledge Management`\n    at cy.<computed> [as log] (http://localhost:3000/__cypress/runner/cypress_runner.js:138922:64)\n    at eval (webpack:///../support/e2e.js:106:11)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at tryCreateUser (webpack:///../support/commands.ts:130:0)\n    at Context.eval (webpack:///../support/commands.ts:160:0)\n    at wrapped (http://localhost:3000/__cypress/runner/cypress_runner.js:138854:43)",
                "diff": null
              },
              "uuid": "b38fa669-e056-4d7d-9bc7-7af9adbece85",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow creating a new concept",
              "fullTitle": "Knowledge Management should allow creating a new concept",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if the add concept button exists\ncy.get('body').then(function ($body) {\n    var hasAddConceptButton = $body.find('[data-testid=\"add-concept\"]').length > 0;\n    if (!hasAddConceptButton) {\n        cy.log('Add concept button not found - it may not be implemented yet');\n        return;\n    }\n    // Click on add concept button\n    cy.get('[data-testid=\"add-concept\"]').click();\n    // Check if the form fields exist\n    cy.get('body').then(function ($updatedBody) {\n        var hasTitleField = $updatedBody.find('input[name=\"title\"]').length > 0;\n        var hasMarkdownEditor = $updatedBody.find('[data-testid=\"markdown-editor\"]').length > 0;\n        var hasDifficultySelector = $updatedBody.find('[data-testid=\"concept-difficulty\"]').length > 0;\n        var hasTopicsInput = $updatedBody.find('[data-testid=\"concept-topics\"]').length > 0;\n        var hasSubmitButton = $updatedBody.find('button[type=\"submit\"]').length > 0;\n        if (!hasTitleField || !hasMarkdownEditor || !hasDifficultySelector || !hasTopicsInput || !hasSubmitButton) {\n            cy.log('Some form fields are missing - they may not be implemented yet');\n            return;\n        }\n        // Fill out the concept form\n        var conceptTitle = \"Test Concept \".concat(Date.now());\n        cy.get('input[name=\"title\"]').type(conceptTitle);\n        cy.get('[data-testid=\"markdown-editor\"]').type('# Test Concept\\n\\nThis is a test concept created by Cypress.');\n        cy.get('[data-testid=\"concept-difficulty\"]').click();\n        // Check if the difficulty options exist\n        cy.get('body').then(function ($bodyAfterClick) {\n            if ($bodyAfterClick.find('[data-testid=\"concept-difficulty-intermediate\"]').length > 0) {\n                cy.get('[data-testid=\"concept-difficulty-intermediate\"]').click();\n            }\n            else {\n                cy.log('Intermediate difficulty option not found - using default');\n            }\n            cy.get('[data-testid=\"concept-topics\"]').type('python{enter}testing{enter}');\n            // Submit the form\n            cy.get('button[type=\"submit\"]').click();\n            // Check for success notification\n            cy.get('body').then(function ($bodyAfterSubmit) {\n                if ($bodyAfterSubmit.find('[data-testid=\"success-notification\"]').length > 0) {\n                    cy.get('[data-testid=\"success-notification\"]').should('be.visible');\n                }\n                else {\n                    cy.log('Success notification not found - it may not be implemented yet');\n                }\n                // Check if the new concept appears in the list\n                if ($bodyAfterSubmit.find('[data-testid=\"concepts-list\"]').length > 0) {\n                    cy.get('[data-testid=\"concepts-list\"]').contains(conceptTitle);\n                }\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "fe05fffa-ad3e-41c5-8b03-892fa437a997",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow editing an existing concept",
              "fullTitle": "Knowledge Management should allow editing an existing concept",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if any concept items exist\ncy.get('body').then(function ($body) {\n    var hasConceptItems = $body.find('[data-testid=\"concept-item\"]').length > 0;\n    if (!hasConceptItems) {\n        cy.log('No concept items found - they may not be implemented yet');\n        return;\n    }\n    // Check if the first concept has an edit button\n    cy.get('[data-testid=\"concept-item\"]').first().then(function ($conceptItem) {\n        var hasEditButton = $conceptItem.find('[data-testid=\"edit-concept\"]').length > 0;\n        if (!hasEditButton) {\n            cy.log('Edit concept button not found - it may not be implemented yet');\n            return;\n        }\n        // Click the edit button\n        cy.wrap($conceptItem).find('[data-testid=\"edit-concept\"]').click();\n        // Check if the form fields exist\n        cy.get('body').then(function ($updatedBody) {\n            var hasTitleField = $updatedBody.find('input[name=\"title\"]').length > 0;\n            var hasMarkdownEditor = $updatedBody.find('[data-testid=\"markdown-editor\"]').length > 0;\n            var hasSubmitButton = $updatedBody.find('button[type=\"submit\"]').length > 0;\n            if (!hasTitleField || !hasMarkdownEditor || !hasSubmitButton) {\n                cy.log('Some form fields are missing - they may not be implemented yet');\n                return;\n            }\n            // Update the concept title\n            var updatedTitle = \"Updated Concept \".concat(Date.now());\n            cy.get('input[name=\"title\"]').clear().type(updatedTitle);\n            // Update the content\n            cy.get('[data-testid=\"markdown-editor\"]').clear().type('# Updated Concept\\n\\nThis concept was updated by Cypress.');\n            // Submit the form\n            cy.get('button[type=\"submit\"]').click();\n            // Check for success notification\n            cy.get('body').then(function ($bodyAfterSubmit) {\n                if ($bodyAfterSubmit.find('[data-testid=\"success-notification\"]').length > 0) {\n                    cy.get('[data-testid=\"success-notification\"]').should('be.visible');\n                }\n                else {\n                    cy.log('Success notification not found - it may not be implemented yet');\n                }\n                // Check if the updated concept appears in the list\n                if ($bodyAfterSubmit.find('[data-testid=\"concepts-list\"]').length > 0) {\n                    cy.get('[data-testid=\"concepts-list\"]').contains(updatedTitle);\n                }\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "fcf48c35-1f1c-4363-bbec-d9507c374d7e",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow reviewing a concept",
              "fullTitle": "Knowledge Management should allow reviewing a concept",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if any concept items exist\ncy.get('body').then(function ($body) {\n    var hasConceptItems = $body.find('[data-testid=\"concept-item\"]').length > 0;\n    if (!hasConceptItems) {\n        cy.log('No concept items found - they may not be implemented yet');\n        return;\n    }\n    // Check if the first concept has a review button\n    cy.get('[data-testid=\"concept-item\"]').first().then(function ($conceptItem) {\n        var hasReviewButton = $conceptItem.find('[data-testid=\"review-concept\"]').length > 0;\n        if (!hasReviewButton) {\n            cy.log('Review concept button not found - it may not be implemented yet');\n            return;\n        }\n        // Click the review button\n        cy.wrap($conceptItem).find('[data-testid=\"review-concept\"]').click();\n        // Check if the review page is displayed\n        cy.get('body').then(function ($updatedBody) {\n            var hasConceptReview = $updatedBody.find('[data-testid=\"concept-review\"]').length > 0;\n            if (!hasConceptReview) {\n                cy.log('Concept review page not found - it may not be implemented yet');\n                return;\n            }\n            // Check if show answer button exists\n            if ($updatedBody.find('[data-testid=\"show-answer\"]').length > 0) {\n                cy.get('[data-testid=\"show-answer\"]').click();\n                // Check if concept content is shown after revealing answer\n                cy.get('body').then(function ($bodyAfterReveal) {\n                    if ($bodyAfterReveal.find('[data-testid=\"concept-content\"]').length > 0) {\n                        cy.get('[data-testid=\"concept-content\"]').should('be.visible');\n                    }\n                    // Check if confidence buttons exist\n                    if ($bodyAfterReveal.find('[data-testid=\"confidence-4\"]').length > 0) {\n                        cy.get('[data-testid=\"confidence-4\"]').click();\n                    }\n                    else {\n                        cy.log('Confidence rating buttons not found - they may not be implemented yet');\n                    }\n                    // Check if notes field exists\n                    if ($bodyAfterReveal.find('textarea[name=\"notes\"]').length > 0) {\n                        cy.get('textarea[name=\"notes\"]').type('Reviewed during Cypress testing');\n                    }\n                    // Check if submit button exists\n                    if ($bodyAfterReveal.find('[data-testid=\"submit-review\"]').length > 0) {\n                        cy.get('[data-testid=\"submit-review\"]').click();\n                        // Check for success notification\n                        cy.get('body').then(function ($bodyAfterSubmit) {\n                            if ($bodyAfterSubmit.find('[data-testid=\"success-notification\"]').length > 0) {\n                                cy.get('[data-testid=\"success-notification\"]').should('be.visible');\n                            }\n                            else {\n                                cy.log('Success notification not found - it may not be implemented yet');\n                            }\n                        });\n                    }\n                    else {\n                        cy.log('Submit review button not found - it may not be implemented yet');\n                    }\n                });\n            }\n            else {\n                cy.log('Show answer button not found - it may not be implemented yet');\n            }\n        });\n    });\n});",
              "err": {},
              "uuid": "5df091bf-1b7c-469f-9bc1-be051e7612b8",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow starting a review session",
              "fullTitle": "Knowledge Management should allow starting a review session",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if the start review session button exists\ncy.get('body').then(function ($body) {\n    var hasStartReviewButton = $body.find('[data-testid=\"start-review-session\"]').length > 0;\n    if (!hasStartReviewButton) {\n        cy.log('Start review session button not found - it may not be implemented yet');\n        return;\n    }\n    // Click on start review session button\n    cy.get('[data-testid=\"start-review-session\"]').click();\n    // Check if the review session page is displayed\n    cy.get('body').then(function ($updatedBody) {\n        var hasReviewSession = $updatedBody.find('[data-testid=\"review-session\"]').length > 0;\n        if (!hasReviewSession) {\n            cy.log('Review session page not found - it may not be implemented yet');\n            return;\n        }\n        // Check if show answer button exists\n        if ($updatedBody.find('[data-testid=\"show-answer\"]').length > 0) {\n            cy.get('[data-testid=\"show-answer\"]').click();\n            // Check if confidence buttons exist\n            cy.get('body').then(function ($bodyAfterReveal) {\n                if ($bodyAfterReveal.find('[data-testid=\"confidence-3\"]').length > 0) {\n                    cy.get('[data-testid=\"confidence-3\"]').click();\n                    // Verify the next concept is displayed or session is complete\n                    cy.get('body').then(function ($bodyAfterRating) {\n                        if ($bodyAfterRating.find('[data-testid=\"review-complete\"]').length > 0) {\n                            // Session is complete\n                            cy.get('[data-testid=\"review-complete\"]').should('be.visible');\n                            if ($bodyAfterRating.find('[data-testid=\"return-to-knowledge\"]').length > 0) {\n                                cy.get('[data-testid=\"return-to-knowledge\"]').click();\n                            }\n                        }\n                        else if ($bodyAfterRating.find('[data-testid=\"show-answer\"]').length > 0) {\n                            // More concepts to review\n                            cy.get('[data-testid=\"show-answer\"]').should('be.visible');\n                        }\n                        else {\n                            cy.log('Neither next question nor review complete page found');\n                        }\n                    });\n                }\n                else {\n                    cy.log('Confidence rating buttons not found - they may not be implemented yet');\n                }\n            });\n        }\n        else {\n            cy.log('Show answer button not found - it may not be implemented yet');\n        }\n    });\n});",
              "err": {},
              "uuid": "14e18fa6-1ee7-4c27-aaf1-dc553e1b6b7d",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should display concept statistics",
              "fullTitle": "Knowledge Management should display concept statistics",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if the statistics tab exists\ncy.get('body').then(function ($body) {\n    var hasStatisticsTab = $body.find('[data-testid=\"statistics-tab\"]').length > 0;\n    if (!hasStatisticsTab) {\n        cy.log('Statistics tab not found - it may not be implemented yet');\n        return;\n    }\n    // Click on statistics tab\n    cy.get('[data-testid=\"statistics-tab\"]').click();\n    // Check if statistics elements exist\n    cy.get('body').then(function ($updatedBody) {\n        if ($updatedBody.find('[data-testid=\"concepts-stats\"]').length > 0) {\n            cy.get('[data-testid=\"concepts-stats\"]').should('be.visible');\n        }\n        else {\n            cy.log('Concepts stats not found - they may not be implemented yet');\n        }\n        if ($updatedBody.find('[data-testid=\"review-history-chart\"]').length > 0) {\n            cy.get('[data-testid=\"review-history-chart\"]').should('be.visible');\n        }\n        else {\n            cy.log('Review history chart not found - it may not be implemented yet');\n        }\n        if ($updatedBody.find('[data-testid=\"confidence-chart\"]').length > 0) {\n            cy.get('[data-testid=\"confidence-chart\"]').should('be.visible');\n        }\n        else {\n            cy.log('Confidence chart not found - it may not be implemented yet');\n        }\n        if ($updatedBody.find('[data-testid=\"topics-distribution-chart\"]').length > 0) {\n            cy.get('[data-testid=\"topics-distribution-chart\"]').should('be.visible');\n        }\n        else {\n            cy.log('Topics distribution chart not found - it may not be implemented yet');\n        }\n        // Test date range filter if it exists\n        if ($updatedBody.find('[data-testid=\"date-range-selector\"]').length > 0) {\n            cy.get('[data-testid=\"date-range-selector\"]').click();\n            cy.get('body').then(function ($bodyAfterClick) {\n                if ($bodyAfterClick.find('[data-testid=\"date-range-last-month\"]').length > 0) {\n                    cy.get('[data-testid=\"date-range-last-month\"]').click();\n                }\n                else {\n                    cy.log('Date range options not found - they may not be implemented yet');\n                }\n            });\n        }\n        else {\n            cy.log('Date range selector not found - it may not be implemented yet');\n        }\n    });\n});",
              "err": {},
              "uuid": "4a39784e-f8bd-481b-ab9d-dede11db4db9",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow deleting a concept",
              "fullTitle": "Knowledge Management should allow deleting a concept",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Check if any concept items exist\ncy.get('body').then(function ($body) {\n    var hasConceptItems = $body.find('[data-testid=\"concept-item\"]').length > 0;\n    if (!hasConceptItems) {\n        cy.log('No concept items found - they may not be implemented yet');\n        return;\n    }\n    // Get the title of the first concept if possible\n    var conceptTitle;\n    if ($body.find('[data-testid=\"concept-item\"]').first().find('[data-testid=\"concept-title\"]').length > 0) {\n        cy.get('[data-testid=\"concept-item\"]').first().within(function () {\n            cy.get('[data-testid=\"concept-title\"]').invoke('text').then(function (text) {\n                conceptTitle = text;\n            });\n        });\n    }\n    // Check if the first concept has a delete button\n    cy.get('[data-testid=\"concept-item\"]').first().then(function ($conceptItem) {\n        var hasDeleteButton = $conceptItem.find('[data-testid=\"delete-concept\"]').length > 0;\n        if (!hasDeleteButton) {\n            cy.log('Delete concept button not found - it may not be implemented yet');\n            return;\n        }\n        // Click the delete button\n        cy.wrap($conceptItem).find('[data-testid=\"delete-concept\"]').click();\n        // Check if confirmation dialog exists\n        cy.get('body').then(function ($updatedBody) {\n            if ($updatedBody.find('[data-testid=\"confirm-delete\"]').length > 0) {\n                cy.get('[data-testid=\"confirm-delete\"]').click();\n                // Check for success notification\n                cy.get('body').then(function ($bodyAfterDelete) {\n                    if ($bodyAfterDelete.find('[data-testid=\"success-notification\"]').length > 0) {\n                        cy.get('[data-testid=\"success-notification\"]').should('be.visible');\n                    }\n                    else {\n                        cy.log('Success notification not found - it may not be implemented yet');\n                    }\n                    // Verify the concept no longer appears in the list if we captured the title\n                    if (conceptTitle && $bodyAfterDelete.find('[data-testid=\"concepts-list\"]').length > 0) {\n                        cy.get('[data-testid=\"concepts-list\"]').contains(conceptTitle).should('not.exist');\n                    }\n                });\n            }\n            else {\n                cy.log('Confirm delete button not found - it may not be implemented yet');\n            }\n        });\n    });\n});",
              "err": {},
              "uuid": "5692f0fd-89dd-435a-98b7-898bc963145f",
              "parentUUID": "953fc87a-ca64-4395-8daf-b644c9a7a86a",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b38fa669-e056-4d7d-9bc7-7af9adbece85"
          ],
          "pending": [],
          "skipped": [
            "fe05fffa-ad3e-41c5-8b03-892fa437a997",
            "fcf48c35-1f1c-4363-bbec-d9507c374d7e",
            "5df091bf-1b7c-469f-9bc1-be051e7612b8",
            "14e18fa6-1ee7-4c27-aaf1-dc553e1b6b7d",
            "4a39784e-f8bd-481b-ab9d-dede11db4db9",
            "5692f0fd-89dd-435a-98b7-898bc963145f"
          ],
          "duration": 479,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reporterEnabled": "cypress-mochawesome-reporter",
        "cypressMochawesomeReporterReporterOptions": {
          "reportDir": "e2e-testing/reports",
          "charts": true,
          "reportPageTitle": "Learning Platform E2E Tests",
          "embeddedScreenshots": true,
          "inlineAssets": true
        },
        "reportDir": "./e2e-testing/cypress/reports/resilient",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}