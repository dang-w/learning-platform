{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-03-17T18:27:43.881Z",
    "end": "2025-03-17T18:27:44.833Z",
    "duration": 952,
    "testsRegistered": 4,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "d27216b7-f3eb-463b-a0c9-e7b8a31c724b",
      "title": "",
      "fullFile": "cypress/e2e/url-metadata.cy.ts",
      "file": "cypress/e2e/url-metadata.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c26c816-b8f1-4946-b692-85b75d0d0b06",
          "title": "URL Metadata Extraction",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should extract metadata from a valid URL",
              "fullTitle": "URL Metadata Extraction should extract metadata from a valid URL",
              "timedOut": null,
              "duration": 880,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n    \"value\": \"cypress/e2e/url-metadata.cy.ts\"\n  },\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      [\n        \"/url-metadata.cy.ts/URL Metadata Extraction -- should extract metadata from a valid URL -- before each hook (failed).png\"\n      ]\n    ]\n  }\n]",
              "code": "// Verify we have a token at minimum\ncy.window().its('localStorage').invoke('getItem', 'token').should('not.be.null');\n// Check if the resource URL input exists before trying to interact with it\ncy.get('body').then(function ($body) {\n    if ($body.find('[data-testid=\"resource-url-input\"]').length) {\n        // Enter a valid URL in the URL input field\n        cy.get('[data-testid=\"resource-url-input\"]').type('https://example.com');\n        // Check if extract button exists\n        if ($body.find('[data-testid=\"extract-metadata-button\"]').length) {\n            // Click the extract metadata button\n            cy.get('[data-testid=\"extract-metadata-button\"]').click();\n            // Check if loading indicator exists\n            cy.get('body').then(function ($updatedBody) {\n                if ($updatedBody.find('[data-testid=\"metadata-loading\"]').length) {\n                    // Check that the loading indicator is displayed\n                    cy.get('[data-testid=\"metadata-loading\"]').should('be.visible');\n                    // Wait for the loading to finish but don't fail if API doesn't work\n                    cy.wait(5000);\n                }\n                else {\n                    cy.log('Metadata loading indicator not found - API may not be implemented');\n                }\n            });\n        }\n        else {\n            cy.log('Extract metadata button not found - feature may not be implemented');\n        }\n    }\n    else {\n        cy.log('Resource URL input not found - page may not be loaded correctly');\n    }\n});",
              "err": {
                "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://localhost:3000/resources/new\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `URL Metadata Extraction`",
                "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://localhost:3000/resources/new\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `URL Metadata Extraction`\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:132351:76)\n    at visitFailedByErr (http://localhost:3000/__cypress/runner/cypress_runner.js:131757:12)\n    at <unknown> (http://localhost:3000/__cypress/runner/cypress_runner.js:132334:13)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:1667:18)\n    at _drainQueueStep (http://localhost:3000/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:2256:14)",
                "diff": null
              },
              "uuid": "24dd59cd-2d28-43bd-b5fb-563c8b6b314a",
              "parentUUID": "6c26c816-b8f1-4946-b692-85b75d0d0b06",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show an error message for invalid URLs",
              "fullTitle": "URL Metadata Extraction should show an error message for invalid URLs",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Enter an invalid URL in the URL input field\ncy.get('[data-testid=\"resource-url-input\"]').type('invalid-url');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Check that the error message is displayed\ncy.get('[data-testid=\"metadata-error\"]').should('be.visible');\n// Check that the error message contains the expected text\ncy.get('[data-testid=\"metadata-error\"]').should('contain', 'Invalid URL');",
              "err": {},
              "uuid": "2bf82651-2bdf-4f2d-afac-eb349117ea2d",
              "parentUUID": "6c26c816-b8f1-4946-b692-85b75d0d0b06",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show an error message when metadata extraction fails",
              "fullTitle": "URL Metadata Extraction should show an error message when metadata extraction fails",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Enter a URL that will fail metadata extraction\ncy.get('[data-testid=\"resource-url-input\"]').type('https://nonexistent-site-for-testing.com');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Check that the loading indicator is displayed\ncy.get('[data-testid=\"metadata-loading\"]').should('be.visible');\n// Wait for the error message to be displayed\ncy.get('[data-testid=\"metadata-error\"]', { timeout: 10000 }).should('be.visible');\n// Check that the error message contains the expected text\ncy.get('[data-testid=\"metadata-error\"]').should('contain', 'Failed to extract metadata');",
              "err": {},
              "uuid": "55580f9a-6811-4534-b6a7-4069cb355f64",
              "parentUUID": "6c26c816-b8f1-4946-b692-85b75d0d0b06",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow manual entry after failed metadata extraction",
              "fullTitle": "URL Metadata Extraction should allow manual entry after failed metadata extraction",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Enter a URL that will fail metadata extraction\ncy.get('[data-testid=\"resource-url-input\"]').type('https://nonexistent-site-for-testing.com');\n// Click the extract metadata button\ncy.get('[data-testid=\"extract-metadata-button\"]').click();\n// Wait for the error message to be displayed\ncy.get('[data-testid=\"metadata-error\"]', { timeout: 10000 }).should('be.visible');\n// Enter title manually\ncy.get('[data-testid=\"resource-title-input\"]').type('Manual Title');\n// Enter description manually\ncy.get('[data-testid=\"resource-description-input\"]').type('Manual description for testing');\n// Select resource type\ncy.get('[data-testid=\"resource-type-select\"]').click();\ncy.get('[data-testid=\"resource-type-article\"]').click();\n// Add tags\ncy.get('[data-testid=\"resource-tags-input\"]').type('test{enter}manual{enter}');\n// Submit the form\ncy.get('[data-testid=\"save-resource-button\"]').click();\n// Check that we're redirected to the resources page\ncy.url().should('include', '/resources');\n// Check that the new resource is displayed in the list\ncy.get('[data-testid=\"resources-list\"]').should('contain', 'Manual Title');",
              "err": {},
              "uuid": "4f438410-86cd-4d6d-8bea-0fa3ebe8cf09",
              "parentUUID": "6c26c816-b8f1-4946-b692-85b75d0d0b06",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "24dd59cd-2d28-43bd-b5fb-563c8b6b314a"
          ],
          "pending": [],
          "skipped": [
            "2bf82651-2bdf-4f2d-afac-eb349117ea2d",
            "55580f9a-6811-4534-b6a7-4069cb355f64",
            "4f438410-86cd-4d6d-8bea-0fa3ebe8cf09"
          ],
          "duration": 880,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/.jsons",
        "charts": true,
        "reportPageTitle": "Learning Platform E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}