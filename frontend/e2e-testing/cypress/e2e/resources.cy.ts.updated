/**
 * resources.cy.ts - Updated with Page Object Model
 * Using resilient testing patterns for better test stability
 */
import { authPage, dashboardPage, resourcesPage } from '../support/page-objects';
import { setupAuthenticatedTestWithData } from '../support/resilientSeedData';

describe('Resources Management', () => {
  beforeEach(() => {
    // Set up authenticated session and seed test data
    setupAuthenticatedTestWithData();

    // Navigate to resources page
    resourcesPage.visitResources();

    // Handle uncaught exceptions
    cy.on('uncaught:exception', (err) => {
      cy.log(`Uncaught exception: ${err.message}`);
      return false;
    });
  });

  it('should display resources list', () => {
    // Check if resources page is loaded
    resourcesPage.isResourcesPageLoaded().then(isLoaded => {
      expect(isLoaded).to.be.true;
      resourcesPage.takeScreenshot('resources-list-loaded');

      // Check if we have resources
      resourcesPage.getResourceCount().then(count => {
        cy.log(`Found ${count} resources`);
        if (count === 0) {
          // Create a test resource if none exist
          cy.log('No resources found, creating a test resource');
          createTestResource();
          resourcesPage.getResourceCount().should('be.gt', 0);
        } else {
          // Take a screenshot of the resources
          resourcesPage.takeScreenshot('existing-resources');
        }
      });
    });
  });

  it('should create a new resource', () => {
    // Create a unique title with timestamp
    const uniqueTitle = `Test Resource ${Date.now()}`;

    // Get initial resource count
    resourcesPage.getResourceCount().then(initialCount => {
      cy.log(`Initial resource count: ${initialCount}`);

      // Create a new resource
      resourcesPage.createResource({
        title: uniqueTitle,
        url: 'https://example.com/test-resource',
        description: 'This is a test resource created by Cypress.',
        type: 'article',
        tags: ['test', 'cypress', 'automation']
      });

      // Verify resource count increased
      resourcesPage.getResourceCount().then(newCount => {
        expect(newCount).to.be.greaterThan(initialCount);

        // Verify the resource exists by its title
        resourcesPage.resourceExists(uniqueTitle).then(exists => {
          expect(exists).to.be.true;
          resourcesPage.takeScreenshot('resource-created-success');
        });
      });
    });
  });

  it('should filter resources by type', () => {
    // Create resources of different types to ensure we have data
    createTestResourcesOfDifferentTypes();

    // Filter by article type
    resourcesPage.filterByType('article');
    resourcesPage.takeScreenshot('filtered-by-article');

    // Check filtered results
    cy.get('body').then($body => {
      // Check if the resources shown are only of type article
      const visibleResources = $body.find(resourcesPage['selectors'].resourceItem);
      const articleResources = $body.find(`${resourcesPage['selectors'].resourceType}:contains("article")`);

      // If we can verify, do so
      if (visibleResources.length > 0) {
        expect(articleResources.length).to.equal(visibleResources.length);
      }
    });
  });

  it('should search for resources', () => {
    // Create a resource with a unique searchable term
    const searchTerm = `searchable-${Date.now()}`;
    resourcesPage.createResource({
      title: `Resource with ${searchTerm}`,
      url: 'https://example.com/searchable',
      description: 'This resource should be found by search.',
      type: 'article'
    });

    // Search for the unique term
    resourcesPage.searchResources(searchTerm);
    resourcesPage.takeScreenshot('search-results');

    // Verify search results
    cy.contains(resourcesPage['selectors'].resourceTitle, searchTerm).should('exist');
  });

  it('should edit a resource', () => {
    // Create a resource to edit
    const originalTitle = `Resource to Edit ${Date.now()}`;
    resourcesPage.createResource({
      title: originalTitle,
      url: 'https://example.com/to-edit',
      description: 'This resource will be edited.',
      type: 'video'
    });

    // Edit the resource
    const updatedTitle = `Updated ${originalTitle}`;
    resourcesPage.editResource(originalTitle, {
      title: updatedTitle,
      description: 'This resource has been edited.'
    });

    // Verify the edited resource
    resourcesPage.resourceExists(updatedTitle).then(exists => {
      expect(exists).to.be.true;
      resourcesPage.takeScreenshot('resource-edited-success');
    });
  });

  it('should delete a resource', () => {
    // Create a resource to delete
    const titleToDelete = `Resource to Delete ${Date.now()}`;
    resourcesPage.createResource({
      title: titleToDelete,
      url: 'https://example.com/to-delete',
      description: 'This resource will be deleted.',
      type: 'course'
    });

    // Verify resource was created
    resourcesPage.resourceExists(titleToDelete).then(exists => {
      expect(exists).to.be.true;

      // Delete the resource
      resourcesPage.deleteResource(titleToDelete);

      // Verify resource was deleted
      resourcesPage.resourceExists(titleToDelete).then(stillExists => {
        expect(stillExists).to.be.false;
        resourcesPage.takeScreenshot('resource-deleted-success');
      });
    });
  });

  // Helper function to create a test resource
  function createTestResource() {
    resourcesPage.createResource({
      title: `Test Resource ${Date.now()}`,
      url: 'https://example.com/resource',
      description: 'A test resource for Cypress testing.',
      type: 'article',
      tags: ['test']
    });
  }

  // Helper function to create resources of different types
  function createTestResourcesOfDifferentTypes() {
    // Create an article
    resourcesPage.createResource({
      title: `Article ${Date.now()}`,
      url: 'https://example.com/article',
      description: 'An article resource.',
      type: 'article'
    });

    // Create a video
    resourcesPage.createResource({
      title: `Video ${Date.now()}`,
      url: 'https://example.com/video',
      description: 'A video resource.',
      type: 'video'
    });

    // Create a course
    resourcesPage.createResource({
      title: `Course ${Date.now()}`,
      url: 'https://example.com/course',
      description: 'A course resource.',
      type: 'course'
    });
  }
});