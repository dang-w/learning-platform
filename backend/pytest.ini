[pytest]
# Set asyncio mode to auto for better compatibility
asyncio_mode = auto

# Register custom markers
markers =
    integration: mark test as an integration test
    unit: marks tests as unit tests
    performance: marks tests as performance tests
    slow: marks tests that take a long time to run
    security: marks security tests

# Test discovery
testpaths = tests
python_files = tests/**/*.py
python_classes = Test*
python_functions = test_*

# Test execution
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)d) [%(name)s]
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Performance settings

# Disable warnings
filterwarnings =
    # Ignore DeprecationWarnings from httpx and httpcore related to Python 3.11 improvements
    ignore:.*issubclass\(HttpCoreAsyncBackend.*:DeprecationWarning:httpx
    ignore:.*HTTPX is using the .asyncio. backend.*:DeprecationWarning:httpx
    # Ignore specific UserWarning related to Pydantic experimental features or changes
    # ignore:.*Field name "model_.*" invalid for.*:UserWarning:pydantic._internal._fields
    # Ignore specific UserWarning related to Pydantic experimental features or changes
    ignore::UserWarning:pydantic._internal._config
    # ignore::pydantic.warnings.PydanticDeprecatedSince20:
    # Ignore warnings from the motor library related to BSON coding options
    # ignore:.*Applying options for collection users failed: connect = True is not supported.*:UserWarning:motor.motor_asyncio

# Coverage settings (optional, if using pytest-cov)
# [coverage:run]
# source = backend
# omit =
#     backend/tests/*
#     backend/main.py  # Example: omit main entry point if mostly setup
#     backend/config.py # Example: omit config files
#
# [coverage:report]
# show_missing = true
# skip_covered = true